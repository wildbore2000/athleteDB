

// Content from: C:\MyPrograms\AthleteDB\client\components.json

{
    "$schema": "https://ui.shadcn.com/schema.json",
    "style": "default",
    "rsc": false,
    "tailwind": {
      "config": "tailwind.config.js",
      "css": "src/index.css",
      "baseColor": "slate",
      "cssVariables": true
    },
    "aliases": {
      "components": "@/components",
      "utils": "@/lib/utils"
    }
  }

// Content from: C:\MyPrograms\AthleteDB\client\package.json

{
  "name": "client",
  "version": "0.1.0",
  "private": true,
  "dependencies": {
    "@radix-ui/react-alert-dialog": "^1.1.2",
    "@radix-ui/react-dialog": "^1.1.2",
    "@radix-ui/react-label": "^2.1.0",
    "@radix-ui/react-select": "^2.1.2",
    "@radix-ui/react-slot": "^1.0.2",
    "@tanstack/react-query": "^5.59.20",
    "@testing-library/jest-dom": "^5.17.0",
    "@testing-library/react": "^13.4.0",
    "@testing-library/user-event": "^13.5.0",
    "autoprefixer": "^10.4.18",
    "axios": "^1.7.7",
    "class-variance-authority": "^0.7.0",
    "clsx": "^2.1.1",
    "date-fns": "^4.1.0",
    "lucide-react": "^0.263.1",
    "postcss": "^8.4.35",
    "react": "^18.3.1",
    "react-dom": "^18.3.1",
    "react-hook-form": "^7.53.2",
    "react-router-dom": "^6.28.0",
    "react-scripts": "5.0.1",
    "recharts": "^2.13.3",
    "tailwind-merge": "^2.5.4",
    "tailwindcss": "^3.4.1",
    "web-vitals": "^2.1.4"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject",
    "dev": "react-scripts start"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  }
}


// Content from: C:\MyPrograms\AthleteDB\client\postcss.config.js

module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}


// Content from: C:\MyPrograms\AthleteDB\client\public\index.html

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta
      name="description"
      content="Web site created using create-react-app"
    />
    <link rel="apple-touch-icon" href="%PUBLIC_URL%/logo192.png" />
    <!--
      manifest.json provides metadata used when your web app is installed on a
      user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/
    -->
    <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
    <!--
      Notice the use of %PUBLIC_URL% in the tags above.
      It will be replaced with the URL of the `public` folder during the build.
      Only files inside the `public` folder can be referenced from the HTML.

      Unlike "/favicon.ico" or "favicon.ico", "%PUBLIC_URL%/favicon.ico" will
      work correctly both with client-side routing and a non-root public URL.
      Learn how to configure a non-root public URL by running `npm run build`.
    -->
    <title>React App</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
  </body>
</html>


// Content from: C:\MyPrograms\AthleteDB\client\public\manifest.json

{
  "short_name": "React App",
  "name": "Create React App Sample",
  "icons": [
    {
      "src": "favicon.ico",
      "sizes": "64x64 32x32 24x24 16x16",
      "type": "image/x-icon"
    },
    {
      "src": "logo192.png",
      "type": "image/png",
      "sizes": "192x192"
    },
    {
      "src": "logo512.png",
      "type": "image/png",
      "sizes": "512x512"
    }
  ],
  "start_url": ".",
  "display": "standalone",
  "theme_color": "#000000",
  "background_color": "#ffffff"
}


// Content from: C:\MyPrograms\AthleteDB\client\src\App.js

// src/App.js
import React from 'react';
import { BrowserRouter as Router, Routes, Route, Navigate } from 'react-router-dom';
import Layout from './components/Layout';

// Pages and Components
import Dashboard from './components/Dashboard';
import { AthleteList } from './components/AthleteList';
import { AthleteForm } from './components/AthleteForm';
import { AthleteDetail } from './components/AthleteDetail';
import AssessmentList from './components/AssessmentList';
import AssessmentForm from './components/AssessmentForm';
import AssessmentDetail from './components/AssessmentDetail';
import { Analytics } from './components/Analytics';
import { ComparisonChart } from './components/ComparisonChart';
import { TrendsChart } from './components/TrendsChart';

// Analytics Layout Component
const AnalyticsLayout = ({ children }) => (
  <div className="space-y-6">
    <div className="flex justify-between items-center">
      <h1 className="text-2xl font-bold">Analytics</h1>
    </div>
    {children}
  </div>
);

function App() {
  return (
    <Router>
      <Layout>
        <Routes>
          {/* Dashboard */}
          <Route path="/" element={<Dashboard />} />

          {/* Athletes Routes */}
          <Route path="/athletes" element={<AthleteList />} />
          <Route path="/athletes/new" element={<AthleteForm />} />
          <Route path="/athletes/:id" element={<AthleteDetail />} />
          <Route path="/athletes/:id/edit" element={<AthleteForm />} />

          {/* Assessment Routes */}
          <Route path="/assessments" element={<AssessmentList />} />
          <Route path="/assessments/new" element={<AssessmentForm />} />
          <Route path="/assessments/:id" element={<AssessmentDetail />} />
          <Route path="/assessments/:id/edit" element={<AssessmentForm />} />
          <Route path="/athletes/:athleteId/assessments" element={<AssessmentList />} />
          <Route path="/athletes/:athleteId/assessments/new" element={<AssessmentForm />} />
          <Route path="/athletes/:athleteId/assessments/:id" element={<AssessmentDetail />} />
          <Route path="/athletes/:athleteId/assessments/:id/edit" element={<AssessmentForm />} />

          {/* Analytics Routes */}
          <Route path="/analytics" element={
            <AnalyticsLayout>
              <Analytics />
            </AnalyticsLayout>
          } />
          <Route path="/analytics/comparison" element={
            <AnalyticsLayout>
              <ComparisonChart />
            </AnalyticsLayout>
          } />
          <Route path="/analytics/trends" element={
            <AnalyticsLayout>
              <TrendsChart />
            </AnalyticsLayout>
          } />

          {/* Catch all */}
          <Route path="*" element={<Navigate to="/" replace />} />
        </Routes>
      </Layout>
    </Router>
  );
}

export default App;

// Content from: C:\MyPrograms\AthleteDB\client\src\App.test.js

import { render, screen } from '@testing-library/react';
import App from './App';

test('renders learn react link', () => {
  render(<App />);
  const linkElement = screen.getByText(/learn react/i);
  expect(linkElement).toBeInTheDocument();
});


// Content from: C:\MyPrograms\AthleteDB\client\src\components\Analytics.jsx

// src/components/Analytics.jsx
import React from 'react';
import { Link } from 'react-router-dom';
import { Card, CardContent, CardHeader, CardTitle } from './ui/card';
import { ComparisonChart } from './ComparisonChart';
import { TrendsChart } from './TrendsChart';

export const Analytics = () => {
  return (
    <div className="space-y-6">
      {/* Performance Trends */}
      <Card>
        <CardHeader>
          <div className="flex justify-between items-center">
            <CardTitle>Performance Trends</CardTitle>
            <Link 
              to="/analytics/trends" 
              className="text-sm text-blue-600 hover:text-blue-800"
            >
              View Details →
            </Link>
          </div>
        </CardHeader>
        <CardContent>
          <TrendsChart metric="verticalJump" timeframe="6m" />
        </CardContent>
      </Card>

      {/* Athlete Comparisons */}
      <Card>
        <CardHeader>
          <div className="flex justify-between items-center">
            <CardTitle>Athlete Comparisons</CardTitle>
            <Link 
              to="/analytics/comparison" 
              className="text-sm text-blue-600 hover:text-blue-800"
            >
              View Details →
            </Link>
          </div>
        </CardHeader>
        <CardContent>
          <ComparisonChart limit={5} />
        </CardContent>
      </Card>
    </div>
  );
};

// Content from: C:\MyPrograms\AthleteDB\client\src\components\AssessmentDetail.jsx

// src/components/AssessmentDetail.jsx
import React, { useState } from 'react';
import { useNavigate, useParams, Link } from 'react-router-dom';
import { useQuery } from '@tanstack/react-query';
import { assessmentApi } from '../services/api';
import { Card, CardContent, CardHeader, CardTitle } from './ui/card';
import { Button } from './ui/button';
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
} from "./ui/alert-dialog";

// Change to default export
export default function AssessmentDetail() {
  const { id, athleteId } = useParams();
  const navigate = useNavigate();
  const [showDeleteDialog, setShowDeleteDialog] = useState(false);

  const { data: assessmentData, isLoading, error } = useQuery({
    queryKey: ['assessment', id],
    queryFn: () => assessmentApi.getAssessment(id)
  });

  const handleDelete = async () => {
    try {
      await assessmentApi.deleteAssessment(id);
      if (athleteId) {
        navigate(`/athletes/${athleteId}/assessments`);
      } else {
        navigate('/assessments');
      }
    } catch (error) {
      console.error('Error deleting assessment:', error);
    }
  };

  if (isLoading) return <div>Loading...</div>;
  if (error) return <div>Error: {error.message}</div>;
  if (!assessmentData?.data) return <div>Assessment not found</div>;

  const assessment = assessmentData.data;

  return (
    <>
      {/* Header with Navigation */}
      <div className="mb-6 space-y-2">
        {athleteId && (
          <Link
            to={`/athletes/${athleteId}`}
            className="text-sm text-blue-600 hover:text-blue-800"
          >
            ← Back to Athlete Profile
          </Link>
        )}
        <div className="flex justify-between items-center">
          <h1 className="text-2xl font-bold">Assessment Details</h1>
          <div className="space-x-2">
            <Button 
              onClick={() => navigate(athleteId 
                ? `/athletes/${athleteId}/assessments/${id}/edit`
                : `/assessments/${id}/edit`
              )}
            >
              Edit Assessment
            </Button>
            <Button 
              variant="destructive" 
              onClick={() => setShowDeleteDialog(true)}
            >
              Delete Assessment
            </Button>
          </div>
        </div>
      </div>

      {/* Basic Information */}
      <div className="space-y-6">
        {/* Athlete Info */}
        {assessment.athlete && (
          <Card>
            <CardHeader>
              <CardTitle>Athlete Information</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-2">
                <p>Name: {assessment.athlete.name}</p>
                <p>Age: {assessment.athlete.age || 'N/A'}</p>
                <p>Height: {assessment.athlete.height?.value ? `${assessment.athlete.height.value}"` : 'N/A'}</p>
                <p>Weight: {assessment.athlete.weight?.value ? `${assessment.athlete.weight.value} lbs` : 'N/A'}</p>
              </div>
            </CardContent>
          </Card>
        )}

        {/* Assessment Info */}
        <Card>
          <CardHeader>
            <CardTitle>Assessment Information</CardTitle>
          </CardHeader>
          <CardContent>
            <p>Date: {new Date(assessment.assessmentDate).toLocaleDateString()}</p>
          </CardContent>
        </Card>

        {/* Movement Screen */}
        <Card>
          <CardHeader>
            <CardTitle>Movement Screen</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              {assessment.movementScreen && (
                <>
                  {/* Overhead Squat */}
                  <div>
                    <h3 className="font-semibold mb-2">Overhead Squat</h3>
                    <p>Left: {assessment.movementScreen.overheadSquat?.scoreLeft || 'N/A'}</p>
                    <p>Right: {assessment.movementScreen.overheadSquat?.scoreRight || 'N/A'}</p>
                    {assessment.movementScreen.overheadSquat?.comments && (
                      <p className="text-sm text-gray-600 mt-1">
                        Comments: {assessment.movementScreen.overheadSquat.comments}
                      </p>
                    )}
                  </div>

                  {/* Hurdle Step */}
                  <div>
                    <h3 className="font-semibold mb-2">Hurdle Step</h3>
                    <p>Left: {assessment.movementScreen.hurdleStep?.scoreLeft || 'N/A'}</p>
                    <p>Right: {assessment.movementScreen.hurdleStep?.scoreRight || 'N/A'}</p>
                    {assessment.movementScreen.hurdleStep?.comments && (
                      <p className="text-sm text-gray-600 mt-1">
                        Comments: {assessment.movementScreen.hurdleStep.comments}
                      </p>
                    )}
                  </div>

                  {/* Inline Lunge */}
                  <div>
                    <h3 className="font-semibold mb-2">Inline Lunge</h3>
                    <p>Left: {assessment.movementScreen.inlineLunge?.scoreLeft || 'N/A'}</p>
                    <p>Right: {assessment.movementScreen.inlineLunge?.scoreRight || 'N/A'}</p>
                    {assessment.movementScreen.inlineLunge?.comments && (
                      <p className="text-sm text-gray-600 mt-1">
                        Comments: {assessment.movementScreen.inlineLunge.comments}
                      </p>
                    )}
                  </div>

                  {/* Apley's Scratch */}
                  <div>
                    <h3 className="font-semibold mb-2">Apley's Scratch</h3>
                    <p>Left: {assessment.movementScreen.apleyScratch?.scoreLeft || 'N/A'}</p>
                    <p>Right: {assessment.movementScreen.apleyScratch?.scoreRight || 'N/A'}</p>
                    {assessment.movementScreen.apleyScratch?.comments && (
                      <p className="text-sm text-gray-600 mt-1">
                        Comments: {assessment.movementScreen.apleyScratch.comments}
                      </p>
                    )}
                  </div>
                </>
              )}
            </div>
          </CardContent>
        </Card>

        {/* Performance Measurements */}
        <Card>
          <CardHeader>
            <CardTitle>Performance Measurements</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              {assessment.performance && (
                <>
                  {/* Jumps */}
                  <div>
                    <h3 className="font-semibold mb-3">Jump Tests</h3>
                    <div className="space-y-2">
                      <div>
                        <p className="font-medium">Vertical Jump</p>
                        <p>Best: {assessment.performance.verticalJump?.value || 'N/A'}"</p>
                        <p className="text-sm text-gray-600">
                          Attempts: {assessment.performance.verticalJump?.attempts?.join('", ')}
                        </p>
                      </div>
                      <div>
                        <p className="font-medium">Broad Jump</p>
                        <p>Best: {assessment.performance.broadJump?.value || 'N/A'}"</p>
                        <p className="text-sm text-gray-600">
                          Attempts: {assessment.performance.broadJump?.attempts?.join('", ')}
                        </p>
                      </div>
                    </div>
                  </div>

                  {/* Sprint */}
                  <div>
                    <h3 className="font-semibold mb-3">Sprint Test</h3>
                    <p>Best: {assessment.performance.tenYardSprint?.value || 'N/A'}s</p>
                    <p className="text-sm text-gray-600">
                      Attempts: {assessment.performance.tenYardSprint?.attempts?.join('s, ')}
                    </p>
                  </div>

                  {/* Medicine Ball Tests */}
                  <div>
                    <h3 className="font-semibold mb-3">Medicine Ball Tests</h3>
                    <div className="space-y-2">
                      <div>
                        <p className="font-medium">OH MB Throw</p>
                        <p>Best: {assessment.performance.ohmbThrow?.value || 'N/A'}"</p>
                        <p className="text-sm text-gray-600">
                          Attempts: {assessment.performance.ohmbThrow?.attempts?.join('", ')}
                        </p>
                      </div>
                      <div>
                        <p className="font-medium">MB Shotput</p>
                        <p>Best: {assessment.performance.mbShotput?.value || 'N/A'}"</p>
                        <p className="text-sm text-gray-600">
                          Attempts: {assessment.performance.mbShotput?.attempts?.join('", ')}
                        </p>
                      </div>
                      <div>
                        <p className="font-medium">MB Lead Arm</p>
                        <p>Best: {assessment.performance.mbLeadArm?.value || 'N/A'}"</p>
                        <p className="text-sm text-gray-600">
                          Attempts: {assessment.performance.mbLeadArm?.attempts?.join('", ')}
                        </p>
                      </div>
                    </div>
                  </div>
                </>
              )}
            </div>
          </CardContent>
        </Card>

        {/* General Comments */}
        {assessment.generalComments && (
          <Card>
            <CardHeader>
              <CardTitle>General Comments</CardTitle>
            </CardHeader>
            <CardContent>
              <p>{assessment.generalComments}</p>
            </CardContent>
          </Card>
        )}
      </div>

      {/* Delete Confirmation Dialog */}
      <AlertDialog open={showDeleteDialog} onOpenChange={setShowDeleteDialog}>
        <AlertDialogContent>
          <AlertDialogHeader>
            <AlertDialogTitle>Are you sure?</AlertDialogTitle>
            <AlertDialogDescription>
              This action cannot be undone. This will permanently delete this assessment record.
            </AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel>Cancel</AlertDialogCancel>
            <AlertDialogAction 
              className="bg-red-500 hover:bg-red-600" 
              onClick={handleDelete}
            >
              Delete
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>
    </>
  );
}

// Content from: C:\MyPrograms\AthleteDB\client\src\components\AssessmentForm.jsx

// src/components/AssessmentForm.jsx
import React, { useState, useEffect } from 'react';
import { useForm } from 'react-hook-form';
import { useNavigate, useParams } from 'react-router-dom';
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import { assessmentApi, athleteApi } from '../services/api';
import { Card, CardContent, CardHeader, CardTitle } from './ui/card';
import { Input } from './ui/input';
import { Button } from './ui/button';
import { Label } from './ui/label';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "./ui/select";
import PerformanceMeasurements from './PerformanceMeasurements';
import MovementScreen from './MovementScreen';
import {
  AlertDialog,
  AlertDialogContent,
  AlertDialogHeader,
  AlertDialogTitle,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogAction,
  AlertDialogCancel,
} from "./ui/alert-dialog";

// Change to default export
export default function AssessmentForm() {
  const { id, athleteId } = useParams();
  const navigate = useNavigate();
  const queryClient = useQueryClient();
  const [showMissingFields, setShowMissingFields] = useState(false);
  const [missingFields, setMissingFields] = useState([]);
  const [submissionData, setSubmissionData] = useState(null);
  
  // Fetch assessment data if editing
  const { data: assessmentData, isLoading: isLoadingAssessment } = useQuery({
    queryKey: ['assessment', id],
    queryFn: () => assessmentApi.getAssessment(id),
    enabled: !!id
  });

  // Fetch athletes for dropdown if not in athlete-specific context
  const { data: athletesData, isLoading: isLoadingAthletes } = useQuery({
    queryKey: ['athletes'],
    queryFn: () => athleteApi.getAthletes(),
    enabled: !athleteId // Only fetch if not in athlete-specific context
  });

  // Form setup
  const { register, handleSubmit, watch, setValue, reset, formState: { errors } } = useForm();

  // Mutations
  const createMutation = useMutation({
    mutationFn: (data) => assessmentApi.createAssessment(data),
    onSuccess: () => {
      queryClient.invalidateQueries('assessments');
      if (athleteId) {
        navigate(`/athletes/${athleteId}/assessments`);
      } else {
        navigate('/assessments');
      }
    }
  });

  const updateMutation = useMutation({
    mutationFn: ({ id, data }) => assessmentApi.updateAssessment(id, data),
    onSuccess: () => {
      queryClient.invalidateQueries('assessments');
      if (athleteId) {
        navigate(`/athletes/${athleteId}/assessments`);
      } else {
        navigate('/assessments');
      }
    }
  });

  // Initialize form when data is loaded
  useEffect(() => {
    if (assessmentData?.data) {
      const formData = {
        ...assessmentData.data,
        assessmentDate: new Date(assessmentData.data.assessmentDate).toISOString().split('T')[0]
      };
      reset(formData);
    }
  }, [assessmentData, reset]);

  const checkMissingFields = (data) => {
    const missing = [];

    if (!data.assessmentDate) missing.push('Assessment Date');
    if (!athleteId && !data.athlete) missing.push('Athlete');

    // Check if any performance measurement is partially filled
    const performanceFields = [
      'verticalJump',
      'broadJump',
      'tenYardSprint',
      'ohmbThrow',
      'mbShotput',
      'mbLeadArm'
    ];

    performanceFields.forEach(field => {
      const measurement = data.performance?.[field];
      if (measurement) {
        const hasAttempts = measurement.attempts?.some(a => a != null);
        if (hasAttempts && !measurement.value) {
          missing.push(`${field} best value`);
        }
      }
    });

    return missing;
  };

  const onSubmit = async (data) => {
    // Prepare submission data
    const formData = {
      ...data,
      athlete: athleteId || data.athlete,
      assessmentDate: new Date(data.assessmentDate).toISOString()
    };

    const missing = checkMissingFields(formData);
    if (missing.length > 0) {
      setMissingFields(missing);
      setSubmissionData(formData);
      setShowMissingFields(true);
      return;
    }

    try {
      if (id) {
        await updateMutation.mutateAsync({ id, data: formData });
      } else {
        await createMutation.mutateAsync(formData);
      }
    } catch (error) {
      console.error('Error saving assessment:', error);
    }
  };

  if (isLoadingAssessment || isLoadingAthletes) return <div>Loading...</div>;

  return (
    <form onSubmit={handleSubmit(onSubmit)} className="space-y-6">
      {/* Basic Information */}
      <Card>
        <CardHeader>
          <CardTitle>{id ? 'Edit' : 'New'} Assessment</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            {/* Athlete Selection - Only show if not in athlete-specific context */}
            {!athleteId && (
              <div>
                <Label>Athlete *</Label>
                <Select 
                  onValueChange={(value) => setValue('athlete', value)}
                  defaultValue={watch('athlete')}
                >
                  <SelectTrigger>
                    <SelectValue placeholder="Select an athlete" />
                  </SelectTrigger>
                  <SelectContent>
                    {athletesData?.data.map((athlete) => (
                      <SelectItem key={athlete._id} value={athlete._id}>
                        {athlete.name}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
                {errors.athlete && (
                  <span className="text-red-500 text-sm">{errors.athlete.message}</span>
                )}
              </div>
            )}

            <div>
              <Label>Assessment Date *</Label>
              <Input 
                type="date" 
                {...register("assessmentDate", { required: "Assessment date is required" })}
              />
              {errors.assessmentDate && (
                <span className="text-red-500 text-sm">{errors.assessmentDate.message}</span>
              )}
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Movement Screen */}
      <MovementScreen register={register} />

      {/* Performance Measurements */}
      <Card>
        <CardHeader>
          <CardTitle>Performance Measurements</CardTitle>
        </CardHeader>
        <CardContent>
          <PerformanceMeasurements 
            register={register} 
            watch={watch} 
            setValue={setValue}
          />
        </CardContent>
      </Card>

      {/* General Comments */}
      <Card>
        <CardHeader>
          <CardTitle>General Comments</CardTitle>
        </CardHeader>
        <CardContent>
          <textarea 
            {...register("generalComments")}
            className="min-h-[200px] w-full rounded-md border p-2"
            placeholder="Enter any additional observations or notes..."
          />
        </CardContent>
      </Card>

      {/* Submit Button */}
      <Button type="submit" className="w-full">
        {id ? 'Update' : 'Submit'} Assessment
      </Button>

      {/* Missing Fields Dialog */}
      <AlertDialog open={showMissingFields} onOpenChange={setShowMissingFields}>
        <AlertDialogContent>
          <AlertDialogHeader>
            <AlertDialogTitle>Review Assessment Details</AlertDialogTitle>
            <AlertDialogDescription>
              The following fields need attention:
              <ul className="list-disc pl-6 mt-2 space-y-1">
                {missingFields.map((field, index) => (
                  <li key={index} className="text-sm">{field}</li>
                ))}
              </ul>
            </AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel>Review</AlertDialogCancel>
            <AlertDialogAction
              onClick={() => {
                setShowMissingFields(false);
                if (submissionData) {
                  if (id) {
                    updateMutation.mutate({ id, data: submissionData });
                  } else {
                    createMutation.mutate(submissionData);
                  }
                }
              }}
            >
              Submit Anyway
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>
    </form>
  );
}

// Content from: C:\MyPrograms\AthleteDB\client\src\components\AssessmentList.jsx

// src/components/AssessmentList.jsx
import React, { useState } from 'react';
import { Link, useParams, useLocation } from 'react-router-dom';
import { useAthlete } from '../hooks';
import { useQuery } from '@tanstack/react-query';
import { assessmentApi } from '../services/api';
import { Card, CardContent, CardHeader, CardTitle } from './ui/card';
import { Button } from './ui/button';
import { Input } from './ui/input';
import { Label } from './ui/label';
import { 
  Search, 
  X, 
  Trash2, 
  Eye, 
  Edit,
  ArrowUpDown,
  ChevronUp,
  ChevronDown 
} from 'lucide-react';
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
} from "./ui/alert-dialog";

const SORT_FIELDS = {
  DATE: 'assessmentDate'
};

const SORT_DIRECTIONS = {
  ASC: 'asc',
  DESC: 'desc'
};

// Rename the component to match the export
export default function AssessmentList() {
  const { athleteId } = useParams();
  const location = useLocation();
  const isAthleteView = Boolean(athleteId);
  
  // State
  const [deleteId, setDeleteId] = useState(null);
  const [dateRange, setDateRange] = useState({
    startDate: '',
    endDate: ''
  });
  const [sortConfig, setSortConfig] = useState({
    field: SORT_FIELDS.DATE,
    direction: SORT_DIRECTIONS.DESC
  });

  // Queries
  const { data: athleteData } = useAthlete(athleteId);
  const { data: assessmentsData, isLoading } = useQuery({
    queryKey: ['assessments', { athleteId, ...dateRange }],
    queryFn: () => assessmentApi.getAssessments({ 
      athleteId,
      startDate: dateRange.startDate,
      endDate: dateRange.endDate
    })
  });

  const handleDateChange = (field, value) => {
    setDateRange(prev => ({
      ...prev,
      [field]: value
    }));
  };

  const handleSort = () => {
    setSortConfig(current => ({
      field: SORT_FIELDS.DATE,
      direction: current.direction === SORT_DIRECTIONS.ASC
        ? SORT_DIRECTIONS.DESC
        : SORT_DIRECTIONS.ASC
    }));
  };

  const getSortIcon = () => {
    return sortConfig.direction === SORT_DIRECTIONS.ASC 
      ? <ChevronUp className="h-4 w-4" />
      : <ChevronDown className="h-4 w-4" />;
  };

  const clearFilters = () => {
    setDateRange({ startDate: '', endDate: '' });
  };

  const handleDelete = async () => {
    try {
      await assessmentApi.deleteAssessment(deleteId);
      setDeleteId(null);
    } catch (error) {
      console.error('Error deleting assessment:', error);
    }
  };

  if (isLoading) return <div>Loading...</div>;

  const sortedAssessments = [...(assessmentsData?.data || [])].sort((a, b) => {
    const dateA = new Date(a.assessmentDate);
    const dateB = new Date(b.assessmentDate);
    return sortConfig.direction === SORT_DIRECTIONS.ASC 
      ? dateA - dateB 
      : dateB - dateA;
  });

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex justify-between items-center">
        <h1 className="text-2xl font-bold">
          {isAthleteView 
            ? `Assessments for ${athleteData?.data.name}`
            : 'All Assessments'}
        </h1>
        <Link to={isAthleteView ? `/athletes/${athleteId}/assessments/new` : "/assessments/new"}>
          <Button>Add New Assessment</Button>
        </Link>
      </div>
      
      {/* Filters Section */}
      <Card>
        <CardContent className="pt-6 pb-4">
          <div className="flex gap-4 items-end">
            {/* Date Filters */}
            <div className="flex-[0.25] space-y-1">
              <Label className="text-sm">Start Date</Label>
              <Input
                type="date"
                value={dateRange.startDate}
                onChange={(e) => handleDateChange('startDate', e.target.value)}
              />
            </div>
            <div className="flex-[0.25] space-y-1">
              <Label className="text-sm">End Date</Label>
              <Input
                type="date"
                value={dateRange.endDate}
                onChange={(e) => handleDateChange('endDate', e.target.value)}
              />
            </div>

            {/* Clear Filters Button */}
            {(dateRange.startDate || dateRange.endDate) && (
              <div className="flex-none">
                <Button 
                  variant="ghost" 
                  size="icon"
                  onClick={clearFilters}
                  className="h-10 w-10"
                >
                  <X className="h-4 w-4" />
                </Button>
              </div>
            )}
          </div>
        </CardContent>
      </Card>

      {/* Sort Controls */}
      <div className="flex items-center justify-between">
        <div className="text-sm text-muted-foreground">
          Showing {sortedAssessments.length} assessments
        </div>
        <Button
          variant="ghost"
          size="sm"
          className="flex items-center gap-2"
          onClick={handleSort}
        >
          Date
          {getSortIcon()}
        </Button>
      </div>

      {/* Assessment Cards */}
      <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
        {sortedAssessments.map((assessment) => (
          <Card 
            key={assessment._id} 
            className="hover:shadow-md transition-shadow duration-200"
          >
            <CardHeader className="pb-3">
              <div className="flex justify-between items-start">
                <div>
                  <CardTitle className="font-semibold mb-1">
                    {new Date(assessment.assessmentDate).toLocaleDateString()}
                  </CardTitle>
                  {!isAthleteView && assessment.athlete && (
                    <p className="text-sm text-muted-foreground">
                      Athlete: {assessment.athlete.name}
                    </p>
                  )}
                </div>
                <Button
                  variant="ghost"
                  size="icon"
                  className="text-red-500 hover:text-red-700 hover:bg-red-50 -mt-2 -mr-2"
                  onClick={() => setDeleteId(assessment._id)}
                >
                  <Trash2 className="h-5 w-5" />
                </Button>
              </div>
            </CardHeader>
            <CardContent className="pt-0">
              {assessment.performance && (
                <div className="mb-4 space-y-1">
                  {assessment.performance.verticalJump?.value && (
                    <p className="text-sm">Vertical Jump: {assessment.performance.verticalJump.value}"</p>
                  )}
                  {assessment.performance.broadJump?.value && (
                    <p className="text-sm">Broad Jump: {assessment.performance.broadJump.value}"</p>
                  )}
                  {assessment.performance.tenYardSprint?.value && (
                    <p className="text-sm">10-Yard Sprint: {assessment.performance.tenYardSprint.value}s</p>
                  )}
                </div>
              )}
              <div className="flex gap-2">
                <Link 
                  to={isAthleteView 
                    ? `/athletes/${athleteId}/assessments/${assessment._id}`
                    : `/assessments/${assessment._id}`
                  } 
                  className="flex-1"
                >
                  <Button variant="outline" className="w-full" size="sm">
                    <Eye className="h-4 w-4 mr-2" />
                    View
                  </Button>
                </Link>
                <Link 
                  to={isAthleteView
                    ? `/athletes/${athleteId}/assessments/${assessment._id}/edit`
                    : `/assessments/edit/${assessment._id}`
                  } 
                  className="flex-1"
                >
                  <Button variant="outline" className="w-full" size="sm">
                    <Edit className="h-4 w-4 mr-2" />
                    Edit
                  </Button>
                </Link>
              </div>
            </CardContent>
          </Card>
        ))}
      </div>

      <AlertDialog open={!!deleteId} onOpenChange={() => setDeleteId(null)}>
        <AlertDialogContent>
          <AlertDialogHeader>
            <AlertDialogTitle>Are you sure?</AlertDialogTitle>
            <AlertDialogDescription>
              This action cannot be undone. This will permanently delete this assessment.
            </AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel>Cancel</AlertDialogCancel>
            <AlertDialogAction 
              className="bg-red-500 hover:bg-red-600" 
              onClick={handleDelete}
            >
              Delete
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>
    </div>
  );
}

// Content from: C:\MyPrograms\AthleteDB\client\src\components\AthleteDetail.jsx


// components/AthleteDetail.jsx
import React from 'react';
import { useParams, Link } from 'react-router-dom';
import { useAthlete } from '../hooks';
import { Card, CardContent, CardHeader, CardTitle } from './ui/card';
import { Button } from './ui/button';

export const AthleteDetail = () => {
  const { id } = useParams();
  const { data, isLoading } = useAthlete(id);

  if (isLoading) return <div>Loading...</div>;
  if (!data) return <div>Athlete not found</div>;

  const athlete = data.data;

  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <h1 className="text-2xl font-bold">{athlete.name}</h1>
        <div className="space-x-2">
          <Link to={`/athletes/${id}/edit`}>
            <Button variant="outline">Edit Athlete</Button>
          </Link>
          <Link to={`/athletes/${id}/assessment/new`}>
            <Button>New Assessment</Button>
          </Link>
        </div>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader>
            <CardTitle>Athlete Information</CardTitle>
          </CardHeader>
          <CardContent className="space-y-2">
            <p>Age: {athlete.age || 'N/A'}</p>
            <p>Height: {athlete.height?.value ? `${athlete.height.value}"` : 'N/A'}</p>
            <p>Weight: {athlete.weight?.value ? `${athlete.weight.value} lbs` : 'N/A'}</p>
            <p>Date of Birth: {athlete.dateOfBirth ? new Date(athlete.dateOfBirth).toLocaleDateString() : 'N/A'}</p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader>
            <CardTitle>Assessment History</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              {athlete.assessments?.map((assessment) => (
                <Link 
                  key={assessment._id} 
                  to={`/athletes/${id}/assessments/${assessment._id}`}
                  className="block"
                >
                  <div className="p-4 border rounded-lg hover:bg-gray-50">
                    <p className="font-medium">
                      {new Date(assessment.assessmentDate).toLocaleDateString()}
                    </p>
                    {/* Add more assessment summary info as needed */}
                  </div>
                </Link>
              ))}
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  );
};

// Content from: C:\MyPrograms\AthleteDB\client\src\components\AthleteForm.jsx

// components/AthleteForm.jsx
import React from 'react';
import { useForm } from 'react-hook-form';
import { useNavigate, useParams } from 'react-router-dom';
import { useAthlete, useCreateAthlete, useUpdateAthlete } from '../hooks';
import { Card, CardContent, CardHeader, CardTitle } from './ui/card';
import { Input } from './ui/input';
import { Button } from './ui/button';
import { Label } from './ui/label';

export const AthleteForm = () => {
  const { id } = useParams();
  const navigate = useNavigate();
  const { data: athleteData, isLoading } = useAthlete(id);
  const createAthlete = useCreateAthlete();
  const updateAthlete = useUpdateAthlete();
  
  const { register, handleSubmit, formState: { errors } } = useForm({
    defaultValues: athleteData?.data
  });

  const onSubmit = async (data) => {
    try {
      if (id) {
        await updateAthlete.mutateAsync({ id, data });
      } else {
        await createAthlete.mutateAsync(data);
      }
      navigate('/athletes');
    } catch (error) {
      console.error('Error saving athlete:', error);
    }
  };

  if (isLoading) return <div>Loading...</div>;

  return (
    <form onSubmit={handleSubmit(onSubmit)}>
      <Card>
        <CardHeader>
          <CardTitle>{id ? 'Edit' : 'New'} Athlete</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div>
            <Label>Name *</Label>
            <Input {...register('name', { required: 'Name is required' })} />
            {errors.name && (
              <span className="text-red-500 text-sm">{errors.name.message}</span>
            )}
          </div>

          <div>
            <Label>Date of Birth</Label>
            <Input type="date" {...register('dateOfBirth')} />
          </div>

          <div className="grid grid-cols-2 gap-4">
            <div>
              <Label>Height (inches)</Label>
              <Input
                type="number"
                step="0.1"
                {...register('height.value')}
              />
            </div>
            <div>
              <Label>Weight (lbs)</Label>
              <Input
                type="number"
                step="0.1"
                {...register('weight.value')}
              />
            </div>
          </div>

          <Button type="submit" className="w-full">
            {id ? 'Update' : 'Create'} Athlete
          </Button>
        </CardContent>
      </Card>
    </form>
  );
};


// Content from: C:\MyPrograms\AthleteDB\client\src\components\AthleteList.jsx

// components/AthleteList.jsx
import React, { useState } from 'react';
import { Link } from 'react-router-dom';
import { useAthletes } from '../hooks';
import { Card, CardContent, CardHeader, CardTitle } from './ui/card';
import { Button } from './ui/button';
import { Input } from './ui/input';
import { Search, X } from 'lucide-react';

export const AthleteList = () => {
  const [searchTerm, setSearchTerm] = useState('');
  const { data, isLoading } = useAthletes({ search: searchTerm });

  if (isLoading) return <div>Loading...</div>;

  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <h1 className="text-2xl font-bold">Athletes</h1>
        <Link to="/athletes/new">
          <Button>Add New Athlete</Button>
        </Link>
      </div>

      <div className="relative">
        <Search className="absolute left-2 top-2.5 h-4 w-4 text-muted-foreground" />
        <Input
          placeholder="Search athletes..."
          value={searchTerm}
          onChange={(e) => setSearchTerm(e.target.value)}
          className="pl-8"
        />
        {searchTerm && (
          <Button
            variant="ghost"
            size="sm"
            className="absolute right-2 top-2"
            onClick={() => setSearchTerm('')}
          >
            <X className="h-4 w-4" />
          </Button>
        )}
      </div>

      <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
        {data?.data.map((athlete) => (
          <Link key={athlete._id} to={`/athletes/${athlete._id}`}>
            <Card className="hover:shadow-md transition-shadow duration-200">
              <CardHeader>
                <CardTitle>{athlete.name}</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-2">
                  <p className="text-sm text-muted-foreground">
                    Age: {athlete.age || 'N/A'}
                  </p>
                  <p className="text-sm text-muted-foreground">
                    Height: {athlete.height?.value ? `${athlete.height.value}"` : 'N/A'}
                  </p>
                  <p className="text-sm text-muted-foreground">
                    Weight: {athlete.weight?.value ? `${athlete.weight.value} lbs` : 'N/A'}
                  </p>
                  <p className="text-sm text-muted-foreground">
                    Total Assessments: {athlete.assessments?.length || 0}
                  </p>
                </div>
              </CardContent>
            </Card>
          </Link>
        ))}
      </div>
    </div>
  );
};



// Content from: C:\MyPrograms\AthleteDB\client\src\components\ComparisonChart.jsx

// src/components/ComparisonChart.jsx
import React, { useState } from 'react';
import { useQuery } from '@tanstack/react-query';
import {
  BarChart,
  Bar,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  Legend,
  ResponsiveContainer
} from 'recharts';
import { useAthletes } from '../hooks';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "./ui/select";
import { METRICS } from './constants';

export const ComparisonChart = ({ limit = 10 }) => {
  const [selectedAthletes, setSelectedAthletes] = useState([]);
  const [selectedMetrics, setSelectedMetrics] = useState(['verticalJump']);
  
  const { data: athletesData } = useAthletes({ limit });
  
  const { data: comparisonData, isLoading } = useQuery({
    queryKey: ['comparativeStats', selectedAthletes, selectedMetrics],
    queryFn: () => fetch(`/api/statistics/compare?athletes=${selectedAthletes.join(',')}&metrics=${selectedMetrics.join(',')}`)
      .then(res => res.json()),
    enabled: selectedAthletes.length > 0 && selectedMetrics.length > 0
  });

  if (isLoading) return <div>Loading...</div>;

  return (
    <div className="space-y-4">
      <div className="flex gap-4">
        <div className="w-64">
          <Select value={selectedAthletes[0]} onValueChange={(value) => setSelectedAthletes([value])}>
            <SelectTrigger>
              <SelectValue placeholder="Select Athletes" />
            </SelectTrigger>
            <SelectContent>
              {athletesData?.data.map(athlete => (
                <SelectItem key={athlete._id} value={athlete._id}>
                  {athlete.name}
                </SelectItem>
              ))}
            </SelectContent>
          </Select>
        </div>
        <div className="w-64">
          <Select value={selectedMetrics[0]} onValueChange={(value) => setSelectedMetrics([value])}>
            <SelectTrigger>
              <SelectValue placeholder="Select Metrics" />
            </SelectTrigger>
            <SelectContent>
              {Object.entries(METRICS).map(([key, { label }]) => (
                <SelectItem key={key} value={key}>
                  {label}
                </SelectItem>
              ))}
            </SelectContent>
          </Select>
        </div>
      </div>

      <div className="h-[400px]">
        <ResponsiveContainer width="100%" height="100%">
          <BarChart data={comparisonData?.data || []}>
            <CartesianGrid strokeDasharray="3 3" />
            <XAxis dataKey="athleteName" />
            <YAxis />
            <Tooltip />
            <Legend />
            {selectedMetrics.map(metric => (
              <Bar
                key={metric}
                dataKey={metric}
                name={METRICS[metric].label}
                fill={`#${Math.floor(Math.random()*16777215).toString(16)}`}
              />
            ))}
          </BarChart>
        </ResponsiveContainer>
      </div>
    </div>
  );
};

// Content from: C:\MyPrograms\AthleteDB\client\src\components\constants.js

// src/components/constants.js
export const METRICS = {
    verticalJump: { label: 'Vertical Jump', unit: 'inches' },
    broadJump: { label: 'Broad Jump', unit: 'inches' },
    tenYardSprint: { label: '10-Yard Sprint', unit: 'seconds' },
    ohmbThrow: { label: 'OH MB Throw', unit: 'inches' },
    mbShotput: { label: 'MB Shotput', unit: 'inches' },
    mbLeadArm: { label: 'MB Lead Arm', unit: 'inches' }
  };
  
  export const TIMEFRAMES = {
    '1m': 'Last Month',
    '3m': 'Last 3 Months',
    '6m': 'Last 6 Months',
    '1y': 'Last Year'
  };
  
  export const SORT_FIELDS = {
    DATE: 'assessmentDate'
  };
  
  export const SORT_DIRECTIONS = {
    ASC: 'asc',
    DESC: 'desc'
  };

// Content from: C:\MyPrograms\AthleteDB\client\src\components\Dashboard.js

// src/components/Dashboard.js
import React from 'react';
import { useQuery } from '@tanstack/react-query';
import { athleteApi, assessmentApi } from '../services/api';
import { Card, CardContent, CardHeader, CardTitle } from './ui/card';
import { Button } from './ui/button';
import { Link } from 'react-router-dom';
import {
  LineChart,
  Line,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  Legend,
  ResponsiveContainer,
  BarChart,
  Bar
} from 'recharts';
import { formatDistanceToNow } from 'date-fns';

const Dashboard = () => {
  // Fetch athletes and recent assessments
  const { data: athletesData } = useQuery({
    queryKey: ['athletes'],
    queryFn: () => athleteApi.getAthletes({ limit: 100 })
  });

  const { data: assessmentsData } = useQuery({
    queryKey: ['assessments'],
    queryFn: () => assessmentApi.getAssessments({ limit: 50 })
  });

  const calculateStats = () => {
    if (!athletesData?.data || !assessmentsData?.data) return null;

    const totalAthletes = athletesData.data.length;
    const totalAssessments = assessmentsData.data.length;
    const assessmentsThisMonth = assessmentsData.data.filter(a => {
      const assessmentDate = new Date(a.assessmentDate);
      const today = new Date();
      return assessmentDate.getMonth() === today.getMonth() &&
             assessmentDate.getFullYear() === today.getFullYear();
    }).length;

    const avgAssessmentsPerAthlete = totalAthletes > 0
      ? (totalAssessments / totalAthletes).toFixed(1)
      : 0;

    return {
      totalAthletes,
      totalAssessments,
      assessmentsThisMonth,
      avgAssessmentsPerAthlete
    };
  };

  const preparePerformanceData = () => {
    if (!assessmentsData?.data) return [];

    // Group assessments by athlete
    const athleteData = {};
    assessmentsData.data.forEach(assessment => {
      if (!athleteData[assessment.athlete?._id]) {
        athleteData[assessment.athlete?._id] = {
          name: assessment.athlete?.name,
          assessments: []
        };
      }
      
      athleteData[assessment.athlete?._id].assessments.push({
        date: new Date(assessment.assessmentDate).toLocaleDateString(),
        verticalJump: assessment.performance?.verticalJump?.value || 0,
        broadJump: assessment.performance?.broadJump?.value || 0,
        sprint: assessment.performance?.tenYardSprint?.value || 0
      });
    });

    return Object.values(athleteData);
  };

  const prepareRecentActivity = () => {
    if (!assessmentsData?.data) return [];
    
    return assessmentsData.data
      .slice(0, 5)
      .map(assessment => ({
        athleteName: assessment.athlete?.name,
        date: assessment.assessmentDate,
        id: assessment._id,
        athleteId: assessment.athlete?._id
      }));
  };

  const stats = calculateStats();
  const performanceData = preparePerformanceData();
  const recentActivity = prepareRecentActivity();

  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <h1 className="text-2xl font-bold">Dashboard</h1>
        <div className="space-x-2">
          <Link to="/athletes/new">
            <Button variant="outline">Add Athlete</Button>
          </Link>
          <Link to="/assessments/add">
            <Button>New Assessment</Button>
          </Link>
        </div>
      </div>

      {/* Summary Statistics */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
        <Card>
          <CardHeader className="pb-2">
            <CardTitle className="text-sm font-medium">
              Total Athletes
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">
              {stats?.totalAthletes || 0}
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="pb-2">
            <CardTitle className="text-sm font-medium">
              Total Assessments
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">
              {stats?.totalAssessments || 0}
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="pb-2">
            <CardTitle className="text-sm font-medium">
              Assessments This Month
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">
              {stats?.assessmentsThisMonth || 0}
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="pb-2">
            <CardTitle className="text-sm font-medium">
              Avg Assessments per Athlete
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">
              {stats?.avgAssessmentsPerAthlete || 0}
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Performance Charts */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        <Card>
          <CardHeader>
            <CardTitle>Vertical Jump Progress</CardTitle>
          </CardHeader>
          <CardContent className="h-[300px]">
            <ResponsiveContainer width="100%" height="100%">
              <LineChart data={performanceData?.[0]?.assessments || []}>
                <CartesianGrid strokeDasharray="3 3" />
                <XAxis dataKey="date" />
                <YAxis />
                <Tooltip />
                <Legend />
                <Line 
                  type="monotone" 
                  dataKey="verticalJump" 
                  stroke="#2563eb" 
                  name="Vertical Jump (inches)"
                />
              </LineChart>
            </ResponsiveContainer>
          </CardContent>
        </Card>

        <Card>
          <CardHeader>
            <CardTitle>Sprint Time Progress</CardTitle>
          </CardHeader>
          <CardContent className="h-[300px]">
            <ResponsiveContainer width="100%" height="100%">
              <LineChart data={performanceData?.[0]?.assessments || []}>
                <CartesianGrid strokeDasharray="3 3" />
                <XAxis dataKey="date" />
                <YAxis />
                <Tooltip />
                <Legend />
                <Line 
                  type="monotone" 
                  dataKey="sprint" 
                  stroke="#dc2626" 
                  name="10-Yard Sprint (seconds)"
                />
              </LineChart>
            </ResponsiveContainer>
          </CardContent>
        </Card>
      </div>

      {/* Recent Activity */}
      <Card>
        <CardHeader>
          <CardTitle>Recent Assessments</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            {recentActivity.map((activity) => (
              <div 
                key={activity.id}
                className="flex justify-between items-center border-b pb-2 last:border-0"
              >
                <div>
                  <Link 
                    to={`/athletes/${activity.athleteId}`}
                    className="font-medium hover:text-blue-600"
                  >
                    {activity.athleteName}
                  </Link>
                  <p className="text-sm text-gray-500">
                    {formatDistanceToNow(new Date(activity.date), { addSuffix: true })}
                  </p>
                </div>
                <Link 
                  to={`/athletes/${activity.athleteId}/assessments/${activity.id}`}
                >
                  <Button variant="outline" size="sm">
                    View Assessment
                  </Button>
                </Link>
              </div>
            ))}
          </div>
        </CardContent>
      </Card>
    </div>
  );
};

export default Dashboard;

// Content from: C:\MyPrograms\AthleteDB\client\src\components\FeetInchesInput.jsx

import React from 'react';
import { Input } from './ui/input';
import { Label } from './ui/label';

const FeetInchesInput = ({ 
  label, 
  value, 
  onChange, 
  placeholder = "", 
  className,
  onValueChange 
}) => {
  const parseInput = (input) => {
    // Handle empty input
    if (!input) {
      onValueChange(null);
      return true;
    }

    // Remove all spaces
    input = input.replace(/\s+/g, '');

    // Case 1: Simple inches number with optional decimal (e.g., "71" or "71.5")
    if (/^\d*\.?\d*$/.test(input)) {
      const inches = parseFloat(input);
      if (!isNaN(inches)) {
        onValueChange(inches);
        return true;
      }
    }

    // Case 2: Feet and inches with symbols and optional decimal (e.g., "5'11.5"" or "5'11.5)
    const feetInchesPattern = /^(\d+)'(\d*\.?\d*)"?$/;
    const match = input.match(feetInchesPattern);
    if (match) {
      const feet = parseInt(match[1], 10);
      const inches = match[2] ? parseFloat(match[2]) : 0;
      
      if (inches >= 12) {
        return false; // Invalid: inches should be less than 12
      }
      
      const totalInches = (feet * 12) + inches;
      onValueChange(totalInches);
      return true;
    }

    // Case 3: Just feet with symbol (e.g., "5'")
    const feetOnlyPattern = /^(\d+)'$/;
    const feetMatch = input.match(feetOnlyPattern);
    if (feetMatch) {
      const feet = parseInt(feetMatch[1], 10);
      onValueChange(feet * 12);
      return true;
    }

    return false; // Invalid format
  };

  const handleChange = (e) => {
    const newValue = e.target.value;
    
    // If it's a valid format, parse and convert
    if (parseInput(newValue)) {
      onChange && onChange(e);
    }
  };

  return (
    <div className={className}>
      {label && <Label>{label}</Label>}
      <Input
        value={value || ''}
        onChange={handleChange}
        placeholder={placeholder}
      />
    </div>
  );
};

export default FeetInchesInput;

// Content from: C:\MyPrograms\AthleteDB\client\src\components\Layout.jsx

// src/components/Layout.jsx
import React, { useState } from 'react';
import { Link, useLocation } from 'react-router-dom';
import { cn } from "../lib/utils";
import {
  LayoutDashboard,
  Users,
  ClipboardList,
  Menu,
  X,
  BarChart2,
  Settings
} from 'lucide-react';
import { Button } from './ui/button';
import {
  Sheet,
  SheetContent,
  SheetTrigger,
} from "./ui/sheet";

const mainNav = [
  {
    name: 'Dashboard',
    href: '/',
    icon: LayoutDashboard,
    exact: true
  },
  {
    name: 'Athletes',
    href: '/athletes',
    icon: Users
  },
  {
    name: 'Assessments',
    href: '/assessments',
    icon: ClipboardList
  },
  {
    name: 'Analytics',
    href: '/analytics',
    icon: BarChart2
  }
];

const NavLink = ({ item, isMobile, onClick }) => {
  const location = useLocation();
  const isActive = item.exact 
    ? location.pathname === item.href 
    : location.pathname.startsWith(item.href);

  return (
    <Link
      to={item.href}
      onClick={onClick}
      className={cn(
        "flex items-center gap-3 rounded-lg px-3 py-2 text-sm transition-colors",
        isActive
          ? "bg-primary text-primary-foreground"
          : "text-muted-foreground hover:bg-accent hover:text-accent-foreground"
      )}
    >
      <item.icon className="h-4 w-4" />
      {item.name}
    </Link>
  );
};

const Sidebar = ({ className }) => {
  return (
    <div className={cn("pb-12", className)}>
      <div className="space-y-4 py-4">
        <div className="px-3 py-2">
          <div className="mb-8">
            <h2 className="mb-2 px-4 text-lg font-semibold tracking-tight">
              AthleteDB
            </h2>
            <p className="px-4 text-sm text-muted-foreground">
              Performance Assessment System
            </p>
          </div>
          <div className="space-y-1">
            {mainNav.map((item) => (
              <NavLink key={item.href} item={item} />
            ))}
          </div>
        </div>
      </div>
    </div>
  );
};

const MobileNav = () => {
  return (
    <Sheet>
      <SheetTrigger asChild>
        <Button
          variant="ghost"
          className="mr-2 px-0 text-base hover:bg-transparent focus-visible:bg-transparent focus-visible:ring-0 focus-visible:ring-offset-0 md:hidden"
        >
          <Menu className="h-6 w-6" />
          <span className="sr-only">Toggle Menu</span>
        </Button>
      </SheetTrigger>
      <SheetContent side="left" className="pr-0">
        <Sidebar />
      </SheetContent>
    </Sheet>
  );
};

const Layout = ({ children }) => {
  return (
    <div className="flex min-h-screen">
      {/* Desktop Sidebar */}
      <div className="hidden md:flex md:w-64 md:flex-col md:fixed md:inset-y-0 z-[80] bg-background">
        <Sidebar />
      </div>

      {/* Mobile Navigation */}
      <div className="sticky top-0 z-40 flex h-16 items-center gap-4 border-b bg-background px-4 md:hidden">
        <MobileNav />
        <h1 className="font-semibold">AthleteDB</h1>
      </div>

      {/* Main Content */}
      <div className="flex-1 md:pl-64">
        <main className="flex-1 p-8">
          {children}
        </main>
      </div>
    </div>
  );
};

export default Layout;

// Content from: C:\MyPrograms\AthleteDB\client\src\components\MovementScreen.jsx

// src/components/MovementScreen.jsx
import React from 'react';
import { Card, CardContent, CardHeader, CardTitle } from './ui/card';
import { Input } from './ui/input';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "./ui/select";

const MovementScreen = ({ register }) => {
  const movements = [
    { 
      name: "Overhead Squat", 
      key: "overheadSquat", 
      type: "score" 
    },
    { 
      name: "Hurdle Step", 
      key: "hurdleStep", 
      type: "score" 
    },
    { 
      name: "Inline Lunge", 
      key: "inlineLunge", 
      type: "score" 
    },
    { 
      name: "Apley's Scratch", 
      key: "apleyScratch", 
      type: "passfail" 
    }
  ];

  const renderScoreInput = (movement, side) => {
    const fieldName = `movementScreen.${movement.key}.score${side}`;
    
    if (movement.type === 'score') {
      return (
        <Input
          type="number"
          min="1"
          max="3"
          className="w-20"
          {...register(fieldName)}
        />
      );
    } else {
      return (
        <Select
          onValueChange={(value) => register(fieldName).onChange({ target: { value }})}
          {...register(fieldName)}
        >
          <SelectTrigger className="w-20">
            <SelectValue placeholder="--" />
          </SelectTrigger>
          <SelectContent>
            <SelectItem value="">--</SelectItem>
            <SelectItem value="pass">Pass</SelectItem>
            <SelectItem value="fail">Fail</SelectItem>
          </SelectContent>
        </Select>
      );
    }
  };

  return (
    <Card>
      <CardHeader>
        <CardTitle>Movement Screen</CardTitle>
      </CardHeader>
      <CardContent>
        <div className="relative overflow-x-auto">
          <table className="w-full text-sm text-left">
            <thead className="text-xs uppercase bg-gray-50">
              <tr>
                <th className="px-6 py-3">Movement</th>
                <th className="px-6 py-3 text-center">Left Side</th>
                <th className="px-6 py-3 text-center">Right Side</th>
                <th className="px-6 py-3">Comments</th>
              </tr>
            </thead>
            <tbody className="divide-y">
              {movements.map((movement) => (
                <tr key={movement.name} className="bg-white">
                  <td className="px-6 py-4 font-medium">
                    {movement.name}
                  </td>
                  <td className="px-6 py-4 text-center">
                    <div className="flex justify-center">
                      {renderScoreInput(movement, 'Left')}
                    </div>
                  </td>
                  <td className="px-6 py-4 text-center">
                    <div className="flex justify-center">
                      {renderScoreInput(movement, 'Right')}
                    </div>
                  </td>
                  <td className="px-6 py-4">
                    <Input
                      type="text"
                      placeholder="Add comments..."
                      {...register(`movementScreen.${movement.key}.comments`)}
                    />
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </CardContent>
    </Card>
  );
};

export default MovementScreen;

// Content from: C:\MyPrograms\AthleteDB\client\src\components\PerformanceInput.jsx

import React, { useState } from 'react';
import { Input } from './ui/input';
import FeetInchesInput from './FeetInchesInput';

const PerformanceInput = ({ 
  type,
  value,
  onChange,
  placeholder,
  className,
  isTimeInput = false
}) => {
  const [inputValue, setInputValue] = useState(value || '');

  const handleChange = (e) => {
    const newValue = e.target.value;
    setInputValue(newValue); // Update the display value immediately

    // For time inputs, pass through directly
    if (isTimeInput) {
      onChange(e);
      return;
    }

    // For height/distance inputs, validate and convert
    // Only convert when we have a valid number or feet/inches format
    if (newValue === '' || newValue === '.') {
      // Allow empty value or single decimal point
      setInputValue(newValue);
    } else if (newValue.includes("'")) {
      // Handle feet/inches format
      const feetInchesPattern = /^(\d+)'(\d*\.?\d*)"?$/;
      const match = newValue.match(feetInchesPattern);
      if (match) {
        const feet = parseInt(match[1], 10);
        const inches = match[2] ? parseFloat(match[2]) : 0;
        if (inches < 12) {
          const totalInches = (feet * 12) + inches;
          onChange({ target: { value: totalInches } });
        }
      }
    } else {
      // Handle direct number input
      const parsed = parseFloat(newValue);
      if (!isNaN(parsed)) {
        onChange({ target: { value: parsed } });
      }
    }
  };

  if (isTimeInput) {
    return (
      <Input
        type="number"
        step="0.01"
        value={value || ''}
        onChange={onChange}
        placeholder={placeholder}
        className={className}
      />
    );
  }

  return (
    <Input
      type="text"
      value={inputValue}
      onChange={handleChange}
      placeholder={placeholder}
      className={className}
    />
  );
};

export default PerformanceInput;

// Content from: C:\MyPrograms\AthleteDB\client\src\components\PerformanceMeasurements.jsx

// src/components/PerformanceMeasurements.jsx
import React, { useEffect } from 'react';
import { Input } from './ui/input';

const PerformanceMeasurements = ({ register, watch, setValue }) => {
  const performanceTests = [
    {
      name: 'Vertical Jump',
      key: 'verticalJump',
      unit: 'inches',
      type: 'distance'
    },
    {
      name: 'Broad Jump',
      key: 'broadJump',
      unit: 'inches',
      type: 'distance'
    },
    {
      name: '10-Yard Sprint',
      key: 'tenYardSprint',
      unit: 'seconds',
      type: 'time'
    },
    {
      name: 'OH MB Throw',
      key: 'ohmbThrow',
      unit: 'inches',
      type: 'distance'
    },
    {
      name: 'MB Shotput',
      key: 'mbShotput',
      unit: 'inches',
      type: 'distance'
    },
    {
      name: 'MB Lead Arm',
      key: 'mbLeadArm',
      unit: 'inches',
      type: 'distance'
    }
  ];

  // Watch all attempts for all tests
  const attemptValues = {};
  performanceTests.forEach(test => {
    attemptValues[test.key] = Array(3).fill(0).map((_, i) => 
      watch(`performance.${test.key}.attempts[${i}]`)
    );
  });

  // Update best values whenever attempts change
  useEffect(() => {
    performanceTests.forEach(test => {
      const attempts = attemptValues[test.key]
        .map(Number)
        .filter(v => !isNaN(v) && v > 0);

      if (attempts.length > 0) {
        const bestValue = test.type === 'time'
          ? Math.min(...attempts)
          : Math.max(...attempts);

        setValue(
          `performance.${test.key}.value`,
          bestValue,
          { shouldDirty: true }
        );
      }
    });
  }, [Object.values(attemptValues).flat(), setValue]);

  return (
    <div className="overflow-x-auto">
      <table className="w-full border-collapse">
        <thead>
          <tr>
            <th className="border p-2">Measurement</th>
            <th className="border p-2">Attempt 1</th>
            <th className="border p-2">Attempt 2</th>
            <th className="border p-2">Attempt 3</th>
            <th className="border p-2">Best</th>
          </tr>
        </thead>
        <tbody>
          {performanceTests.map((test) => (
            <tr key={test.key}>
              <td className="border p-2">
                {test.name}
                <span className="text-sm text-gray-500 ml-1">
                  ({test.unit})
                </span>
              </td>
              {[0, 1, 2].map((attemptIndex) => (
                <td key={attemptIndex} className="border p-2">
                  <Input
                    type="number"
                    step={test.type === 'time' ? '0.01' : '0.1'}
                    {...register(`performance.${test.key}.attempts[${attemptIndex}]`)}
                    className="w-24"
                    placeholder={`${test.unit}`}
                  />
                </td>
              ))}
              <td className="border p-2 font-bold">
                {watch(`performance.${test.key}.value`)
                  ? `${watch(`performance.${test.key}.value`).toFixed(2)}${
                      test.type === 'time' ? 's' : '"'
                    }`
                  : '-'}
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default PerformanceMeasurements;

// Content from: C:\MyPrograms\AthleteDB\client\src\components\TrendsChart.jsx

// src/components/TrendsChart.jsx
import React, { useState } from 'react';
import { useQuery } from '@tanstack/react-query';
import {
  LineChart,
  Line,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  Legend,
  ResponsiveContainer
} from 'recharts';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "./ui/select";
import { METRICS, TIMEFRAMES } from './constants';

export const TrendsChart = ({ metric: initialMetric = 'verticalJump', timeframe: initialTimeframe = '6m' }) => {
  const [metric, setMetric] = useState(initialMetric);
  const [timeframe, setTimeframe] = useState(initialTimeframe);

  const { data, isLoading } = useQuery({
    queryKey: ['performanceTrends', metric, timeframe],
    queryFn: () => fetch(`/api/statistics/trends?metric=${metric}&timeframe=${timeframe}`)
      .then(res => res.json())
  });

  if (isLoading) return <div>Loading...</div>;

  return (
    <div className="space-y-4">
      <div className="flex gap-4">
        <div className="w-48">
          <Select value={metric} onValueChange={setMetric}>
            <SelectTrigger>
              <SelectValue defaultValue={metric} />
            </SelectTrigger>
            <SelectContent>
              {Object.entries(METRICS).map(([key, { label }]) => (
                <SelectItem key={key} value={key}>{label}</SelectItem>
              ))}
            </SelectContent>
          </Select>
        </div>
        <div className="w-48">
          <Select value={timeframe} onValueChange={setTimeframe}>
            <SelectTrigger>
              <SelectValue defaultValue={timeframe} />
            </SelectTrigger>
            <SelectContent>
              {Object.entries(TIMEFRAMES).map(([key, label]) => (
                <SelectItem key={key} value={key}>{label}</SelectItem>
              ))}
            </SelectContent>
          </Select>
        </div>
      </div>

      <div className="h-[400px]">
        <ResponsiveContainer width="100%" height="100%">
          <LineChart data={data?.data || []}>
            <CartesianGrid strokeDasharray="3 3" />
            <XAxis dataKey="month" />
            <YAxis 
              label={{ 
                value: METRICS[metric].unit, 
                angle: -90, 
                position: 'insideLeft' 
              }} 
            />
            <Tooltip />
            <Legend />
            <Line
              type="monotone"
              dataKey="average"
              stroke="#2563eb"
              name={METRICS[metric].label}
            />
          </LineChart>
        </ResponsiveContainer>
      </div>
    </div>
  );
};

// Content from: C:\MyPrograms\AthleteDB\client\src\components\ui\alert-dialog.jsx

// src/components/ui/alert-dialog.jsx
import * as React from "react"
import * as AlertDialogPrimitive from "@radix-ui/react-alert-dialog"
import { cn } from "../../lib/utils"

const AlertDialog = AlertDialogPrimitive.Root
const AlertDialogTrigger = AlertDialogPrimitive.Trigger

const AlertDialogPortal = AlertDialogPrimitive.Portal

const AlertDialogOverlay = React.forwardRef(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))

const AlertDialogContent = React.forwardRef(({ className, ...props }, ref) => (
  <AlertDialogPortal>
    <AlertDialogOverlay />
    <AlertDialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    />
  </AlertDialogPortal>
))

const AlertDialogHeader = ({ className, ...props }) => (
  <div className={cn("flex flex-col space-y-2 text-center sm:text-left", className)} {...props} />
)

const AlertDialogFooter = ({ className, ...props }) => (
  <div className={cn("flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2", className)} {...props} />
)

const AlertDialogTitle = React.forwardRef(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Title ref={ref} className={cn("text-lg font-semibold", className)} {...props} />
))

const AlertDialogDescription = React.forwardRef(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))

const AlertDialogAction = React.forwardRef(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Action
    ref={ref}
    className={cn("inline-flex h-10 items-center justify-center rounded-md bg-destructive px-4 py-2 text-sm font-semibold text-destructive-foreground ring-offset-background transition-colors hover:bg-destructive/90 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50", className)}
    {...props}
  />
))

const AlertDialogCancel = React.forwardRef(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Cancel
    ref={ref}
    className={cn("mt-2 inline-flex h-10 items-center justify-center rounded-md border border-input bg-background px-4 py-2 text-sm font-semibold ring-offset-background transition-colors hover:bg-accent hover:text-accent-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 sm:mt-0", className)}
    {...props}
  />
))

export {
  AlertDialog,
  AlertDialogPortal,
  AlertDialogOverlay,
  AlertDialogTrigger,
  AlertDialogContent,
  AlertDialogHeader,
  AlertDialogFooter,
  AlertDialogTitle,
  AlertDialogDescription,
  AlertDialogAction,
  AlertDialogCancel,
}

// Content from: C:\MyPrograms\AthleteDB\client\src\components\ui\button.jsx

import * as React from "react"
import { cn } from "../../lib/utils"

const Button = React.forwardRef(({ className, ...props }, ref) => {
  return (
    <button
      className={cn(
        "inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 bg-primary text-primary-foreground hover:bg-primary/90 h-10 px-4 py-2",
        className
      )}
      ref={ref}
      {...props}
    />
  )
})

export { Button }

// Content from: C:\MyPrograms\AthleteDB\client\src\components\ui\card.jsx

// src/components/ui/card.jsx
import * as React from "react"
import { cn } from "../../lib/utils"

const Card = React.forwardRef(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("rounded-lg border bg-card text-card-foreground shadow-sm", className)}
    {...props}
  />
))

const CardHeader = React.forwardRef(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
))

const CardContent = React.forwardRef(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))

const CardTitle = React.forwardRef(({ className, children, ...props }, ref) => (
  <h3
    ref={ref}
    className={cn("text-2xl font-semibold leading-none tracking-tight", className)}
    {...props}
  >
    {children}
  </h3>
))

export { Card, CardHeader, CardContent, CardTitle }

// Content from: C:\MyPrograms\AthleteDB\client\src\components\ui\input.jsx

import * as React from "react"
import { cn } from "../../lib/utils"

const Input = React.forwardRef(({ className, type, ...props }, ref) => {
  return (
    <input
      type={type}
      className={cn(
        "flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      ref={ref}
      {...props}
    />
  )
})

export { Input }

// Content from: C:\MyPrograms\AthleteDB\client\src\components\ui\label.jsx

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { cn } from "../../lib/utils"

const Label = React.forwardRef(({ className, ...props }, ref) => (
  <LabelPrimitive.Root
    ref={ref}
    className={cn(
      "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70",
      className
    )}
    {...props}
  />
))

export { Label }

// Content from: C:\MyPrograms\AthleteDB\client\src\components\ui\select.jsx

// src/components/ui/select.jsx
import * as React from "react"
import * as SelectPrimitive from "@radix-ui/react-select"
import { Check, ChevronDown } from "lucide-react"

import { cn } from "../../lib/utils"

const Select = SelectPrimitive.Root

const SelectGroup = SelectPrimitive.Group

const SelectValue = SelectPrimitive.Value

const SelectTrigger = React.forwardRef(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
      className
    )}
    {...props}
  >
    {children}
    <ChevronDown className="h-4 w-4 opacity-50" />
  </SelectPrimitive.Trigger>
))
SelectTrigger.displayName = SelectPrimitive.Trigger.displayName

const SelectContent = React.forwardRef(({ className, children, position = "popper", ...props }, ref) => (
  <SelectPrimitive.Portal>
    <SelectPrimitive.Content
      ref={ref}
      className={cn(
        "relative z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md animate-in fade-in-80",
        position === "popper" && "translate-y-1",
        className
      )}
      position={position}
      {...props}
    >
      <SelectPrimitive.Viewport
        className={cn(
          "p-1",
          position === "popper" &&
            "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]"
        )}
      >
        {children}
      </SelectPrimitive.Viewport>
    </SelectPrimitive.Content>
  </SelectPrimitive.Portal>
))
SelectContent.displayName = SelectPrimitive.Content.displayName

const SelectLabel = React.forwardRef(({ className, ...props }, ref) => (
  <SelectPrimitive.Label
    ref={ref}
    className={cn("py-1.5 pl-8 pr-2 text-sm font-semibold", className)}
    {...props}
  />
))
SelectLabel.displayName = SelectPrimitive.Label.displayName

const SelectItem = React.forwardRef(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <SelectPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </SelectPrimitive.ItemIndicator>
    </span>

    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
  </SelectPrimitive.Item>
))
SelectItem.displayName = SelectPrimitive.Item.displayName

const SelectSeparator = React.forwardRef(({ className, ...props }, ref) => (
  <SelectPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
SelectSeparator.displayName = SelectPrimitive.Separator.displayName

export {
  Select,
  SelectGroup,
  SelectValue,
  SelectTrigger,
  SelectContent,
  SelectLabel,
  SelectItem,
  SelectSeparator,
}

// Content from: C:\MyPrograms\AthleteDB\client\src\components\ui\sheet.jsx

// src/components/ui/sheet.jsx
import * as React from "react"
import * as SheetPrimitive from "@radix-ui/react-dialog"
import { cva } from "class-variance-authority"
import { X } from "lucide-react"

// Updated import path to use relative path
import { cn } from "../../lib/utils"

const Sheet = SheetPrimitive.Root

const SheetTrigger = SheetPrimitive.Trigger

const SheetClose = SheetPrimitive.Close

const SheetPortal = SheetPrimitive.Portal

const SheetOverlay = React.forwardRef(({ className, ...props }, ref) => (
  <SheetPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
SheetOverlay.displayName = SheetPrimitive.Overlay.displayName

const sheetVariants = cva(
  "fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500",
  {
    variants: {
      side: {
        top: "inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top",
        bottom:
          "inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom",
        left: "inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm",
        right:
          "inset-y-0 right-0 h-full w-3/4 border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm",
      },
    },
    defaultVariants: {
      side: "right",
    },
  }
)

const SheetContent = React.forwardRef(({ side = "right", className, children, ...props }, ref) => (
  <SheetPortal>
    <SheetOverlay />
    <SheetPrimitive.Content ref={ref} className={cn(sheetVariants({ side }), className)} {...props}>
      {children}
      <SheetPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </SheetPrimitive.Close>
    </SheetPrimitive.Content>
  </SheetPortal>
))
SheetContent.displayName = SheetPrimitive.Content.displayName

const SheetHeader = ({
  className,
  ...props
}) => (
  <div
    className={cn("flex flex-col space-y-2 text-center sm:text-left", className)}
    {...props}
  />
)
SheetHeader.displayName = "SheetHeader"

const SheetFooter = ({
  className,
  ...props
}) => (
  <div
    className={cn("flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2", className)}
    {...props}
  />
)
SheetFooter.displayName = "SheetFooter"

const SheetTitle = React.forwardRef(({ className, ...props }, ref) => (
  <SheetPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold text-foreground", className)}
    {...props}
  />
))
SheetTitle.displayName = SheetPrimitive.Title.displayName

const SheetDescription = React.forwardRef(({ className, ...props }, ref) => (
  <SheetPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
SheetDescription.displayName = SheetPrimitive.Description.displayName

export {
  Sheet,
  SheetPortal,
  SheetOverlay,
  SheetTrigger,
  SheetClose,
  SheetContent,
  SheetHeader,
  SheetFooter,
  SheetTitle,
  SheetDescription,
}

// Content from: C:\MyPrograms\AthleteDB\client\src\components\ui\textarea.jsx

import * as React from "react"
import { cn } from "../../lib/utils"

const Textarea = React.forwardRef(({ className, ...props }, ref) => {
  return (
    <textarea
      className={cn(
        "flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      ref={ref}
      {...props}
    />
  )
})

export { Textarea }

// Content from: C:\MyPrograms\AthleteDB\client\src\hooks\index.js

// src/hooks/index.js
export {
    useAthletes,
    useAthlete,
    useCreateAthlete,
    useUpdateAthlete,
    useDeleteAthlete,
    useAthleteStats,
    useAthleteTrends,
    // Assessment hooks
    useAssessments,
    useAssessment,
    useCreateAssessment,
    useUpdateAssessment,
    useDeleteAssessment,
    // Analytics hooks
    useDashboardStats,
    usePerformanceTrends,
    useComparativeStats
  } from './useData';

// Content from: C:\MyPrograms\AthleteDB\client\src\hooks\useData.js

// src/hooks/useData.js
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import { athleteApi, assessmentApi, analyticsApi } from '../services/api';

// Query Keys
export const QUERY_KEYS = {
  athletes: 'athletes',
  athlete: 'athlete',
  athleteStats: 'athleteStats',
  athleteTrends: 'athleteTrends',
  assessments: 'assessments',
  assessment: 'assessment',
  assessmentStats: 'assessmentStats',
  dashboardStats: 'dashboardStats',
  performanceTrends: 'performanceTrends'
};

// Athlete Hooks
export function useAthletes(params) {
  return useQuery({
    queryKey: [QUERY_KEYS.athletes, params],
    queryFn: () => athleteApi.getAthletes(params),
    keepPreviousData: true,
  });
}

export function useAthlete(id) {
  return useQuery({
    queryKey: [QUERY_KEYS.athlete, id],
    queryFn: () => athleteApi.getAthlete(id),
    enabled: !!id,
  });
}

export function useAthleteStats(id) {
  return useQuery({
    queryKey: [QUERY_KEYS.athleteStats, id],
    queryFn: () => athleteApi.getAthleteStats(id),
    enabled: !!id,
  });
}

export function useAthleteTrends(id, metric) {
  return useQuery({
    queryKey: [QUERY_KEYS.athleteTrends, id, metric],
    queryFn: () => athleteApi.getAthleteTrends(id, metric),
    enabled: !!id && !!metric,
  });
}

export function useCreateAthlete() {
  const queryClient = useQueryClient();

  return useMutation({
    mutationFn: (data) => athleteApi.createAthlete(data),
    onSuccess: () => {
      queryClient.invalidateQueries(QUERY_KEYS.athletes);
    },
  });
}

export function useUpdateAthlete() {
  const queryClient = useQueryClient();

  return useMutation({
    mutationFn: ({ id, data }) => athleteApi.updateAthlete(id, data),
    onSuccess: (_, variables) => {
      queryClient.invalidateQueries([QUERY_KEYS.athlete, variables.id]);
      queryClient.invalidateQueries(QUERY_KEYS.athletes);
    },
  });
}

export function useDeleteAthlete() {
  const queryClient = useQueryClient();

  return useMutation({
    mutationFn: (id) => athleteApi.deleteAthlete(id),
    onSuccess: () => {
      queryClient.invalidateQueries(QUERY_KEYS.athletes);
    },
  });
}

// Assessment Hooks
export function useAssessments(params) {
  return useQuery({
    queryKey: [QUERY_KEYS.assessments, params],
    queryFn: () => assessmentApi.getAssessments(params),
    keepPreviousData: true,
  });
}

export function useAthleteAssessments(athleteId, params) {
  return useQuery({
    queryKey: [QUERY_KEYS.assessments, athleteId, params],
    queryFn: () => assessmentApi.getAthleteAssessments(athleteId, params),
    enabled: !!athleteId,
    keepPreviousData: true,
  });
}

export function useAssessment(id) {
  return useQuery({
    queryKey: [QUERY_KEYS.assessment, id],
    queryFn: () => assessmentApi.getAssessment(id),
    enabled: !!id,
  });
}

export function useCreateAssessment() {
  const queryClient = useQueryClient();

  return useMutation({
    mutationFn: (data) => assessmentApi.createAssessment(data),
    onSuccess: (response) => {
      queryClient.invalidateQueries(QUERY_KEYS.assessments);
      queryClient.invalidateQueries([QUERY_KEYS.athlete, response.data.athlete]);
    },
  });
}

export function useUpdateAssessment() {
  const queryClient = useQueryClient();

  return useMutation({
    mutationFn: ({ id, data }) => assessmentApi.updateAssessment(id, data),
    onSuccess: (response, variables) => {
      queryClient.invalidateQueries([QUERY_KEYS.assessment, variables.id]);
      queryClient.invalidateQueries(QUERY_KEYS.assessments);
      queryClient.invalidateQueries([QUERY_KEYS.athlete, response.data.athlete]);
    },
  });
}

export function useDeleteAssessment() {
  const queryClient = useQueryClient();

  return useMutation({
    mutationFn: (id) => assessmentApi.deleteAssessment(id),
    onSuccess: (_, id) => {
      queryClient.invalidateQueries(QUERY_KEYS.assessments);
      // Since we don't know the athlete ID here, we may need to invalidate all athlete queries
      queryClient.invalidateQueries(QUERY_KEYS.athletes);
    },
  });
}

// Analytics Hooks
export function useDashboardStats() {
  return useQuery({
    queryKey: [QUERY_KEYS.dashboardStats],
    queryFn: () => analyticsApi.getDashboardStats(),
    refetchInterval: 5 * 60 * 1000, // Refetch every 5 minutes
  });
}

export function usePerformanceTrends(metric, timeframe) {
  return useQuery({
    queryKey: [QUERY_KEYS.performanceTrends, metric, timeframe],
    queryFn: () => analyticsApi.getPerformanceTrends(metric, timeframe),
    enabled: !!metric,
  });
}

export function useComparativeStats(athleteIds, metrics) {
  return useQuery({
    queryKey: ['comparativeStats', athleteIds, metrics],
    queryFn: () => analyticsApi.getComparativeStats(athleteIds, metrics),
    enabled: !!athleteIds?.length && !!metrics?.length,
  });
}

// Content from: C:\MyPrograms\AthleteDB\client\src\index.css

@tailwind base;
@tailwind components;
@tailwind utilities;
 
@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 222.2 84% 4.9%;

    --card: 0 0% 100%;
    --card-foreground: 222.2 84% 4.9%;
 
    --popover: 0 0% 100%;
    --popover-foreground: 222.2 84% 4.9%;
 
    --primary: 222.2 47.4% 11.2%;
    --primary-foreground: 210 40% 98%;
 
    --secondary: 210 40% 96.1%;
    --secondary-foreground: 222.2 47.4% 11.2%;
 
    --muted: 210 40% 96.1%;
    --muted-foreground: 215.4 16.3% 46.9%;
 
    --accent: 210 40% 96.1%;
    --accent-foreground: 222.2 47.4% 11.2%;
 
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 210 40% 98%;

    --border: 214.3 31.8% 91.4%;
    --input: 214.3 31.8% 91.4%;
    --ring: 222.2 84% 4.9%;
 
    --radius: 0.5rem;
  }
 
  .dark {
    --background: 222.2 84% 4.9%;
    --foreground: 210 40% 98%;
 
    --card: 222.2 84% 4.9%;
    --card-foreground: 210 40% 98%;
 
    --popover: 222.2 84% 4.9%;
    --popover-foreground: 210 40% 98%;
 
    --primary: 210 40% 98%;
    --primary-foreground: 222.2 47.4% 11.2%;
 
    --secondary: 217.2 32.6% 17.5%;
    --secondary-foreground: 210 40% 98%;
 
    --muted: 217.2 32.6% 17.5%;
    --muted-foreground: 215 20.2% 65.1%;
 
    --accent: 217.2 32.6% 17.5%;
    --accent-foreground: 210 40% 98%;
 
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 210 40% 98%;
 
    --border: 217.2 32.6% 17.5%;
    --input: 217.2 32.6% 17.5%;
    --ring: 212.7 26.8% 83.9%;
  }
}
 
@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
  }
}

// Content from: C:\MyPrograms\AthleteDB\client\src\index.js

// src/index.js
import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App';
import reportWebVitals from './reportWebVitals';
import { QueryClientProvider } from '@tanstack/react-query';
import { queryClient } from './lib/queryClient';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <QueryClientProvider client={queryClient}>
      <App />
    </QueryClientProvider>
  </React.StrictMode>
);

// If you want to start measuring performance in your app, pass a function
// to log results (for example: reportWebVitals(console.log))
// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
reportWebVitals();


// Content from: C:\MyPrograms\AthleteDB\client\src\lib\queryClient.js

// src/lib/queryClient.js
import { QueryClient } from '@tanstack/react-query';

export const queryClient = new QueryClient({
  defaultOptions: {
    queries: {
      refetchOnWindowFocus: false,
      retry: 1,
      staleTime: 5 * 60 * 1000, // 5 minutes
    },
  },
});

// Content from: C:\MyPrograms\AthleteDB\client\src\lib\utils.js

// src/lib/utils.js
import { clsx } from "clsx"
import { twMerge } from "tailwind-merge"
 
export function cn(...inputs) {
  return twMerge(clsx(inputs))
}

// Content from: C:\MyPrograms\AthleteDB\client\src\reportWebVitals.js

const reportWebVitals = onPerfEntry => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;


// Content from: C:\MyPrograms\AthleteDB\client\src\services\api.js

// src/services/api.js
import axios from 'axios';

const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';

// Create axios instance with default config
const api = axios.create({
  baseURL: API_URL,
  headers: {
    'Content-Type': 'application/json'
  }
});

// Error handling interceptor
api.interceptors.response.use(
  response => response,
  error => {
    // Handle specific error cases
    if (error.response) {
      console.error('API Error:', error.response.data);
      throw new Error(error.response.data.message || 'An error occurred');
    } else if (error.request) {
      console.error('Network Error:', error.request);
      throw new Error('Network error - please check your connection');
    } else {
      console.error('Error:', error.message);
      throw error;
    }
  }
);

// Athletes API
export const athleteApi = {
  getAthletes: async (params = {}) => {
    const response = await api.get('/athletes', { params });
    return response.data;
  },

  getAthlete: async (id) => {
    const response = await api.get(`/athletes/${id}`);
    return response.data;
  },

  createAthlete: async (data) => {
    const response = await api.post('/athletes', data);
    return response.data;
  },

  updateAthlete: async (id, data) => {
    const response = await api.put(`/athletes/${id}`, data);
    return response.data;
  },

  deleteAthlete: async (id) => {
    const response = await api.delete(`/athletes/${id}`);
    return response.data;
  }
};

// Assessments API
export const assessmentApi = {
  getAssessments: async (params = {}) => {
    const response = await api.get('/assessments', { params });
    return response.data;
  },

  getAssessment: async (id) => {
    const response = await api.get(`/assessments/${id}`);
    return response.data;
  },

  getAthleteAssessments: async (athleteId, params = {}) => {
    const response = await api.get('/assessments', { 
      params: { athleteId, ...params } 
    });
    return response.data;
  },

  createAssessment: async (data) => {
    const response = await api.post('/assessments', data);
    return response.data;
  },

  updateAssessment: async (id, data) => {
    const response = await api.put(`/assessments/${id}`, data);
    return response.data;
  },

  deleteAssessment: async (id) => {
    const response = await api.delete(`/assessments/${id}`);
    return response.data;
  }
};

// Analytics API
export const analyticsApi = {
  // Get dashboard statistics
  getDashboardStats: async () => {
    const response = await api.get('/statistics/dashboard');
    return response.data;
  },

  // Get performance trends for a specific metric
  getPerformanceTrends: async (metric, timeframe = '1y') => {
    const response = await api.get('/statistics/trends', {
      params: { metric, timeframe }
    });
    return response.data;
  },

  // Get comparative statistics between athletes
  getComparativeStats: async (athleteIds, metrics) => {
    const response = await api.get('/statistics/compare', {
      params: { 
        athletes: Array.isArray(athleteIds) ? athleteIds.join(',') : athleteIds,
        metrics: Array.isArray(metrics) ? metrics.join(',') : metrics
      }
    });
    return response.data;
  },

  // Get athlete statistics
  getAthleteStats: async (athleteId) => {
    const response = await api.get(`/athletes/${athleteId}/statistics`);
    return response.data;
  },

  // Get athlete performance trends
  getAthleteTrends: async (athleteId, metric) => {
    const response = await api.get(`/athletes/${athleteId}/trends`, {
      params: { metric }
    });
    return response.data;
  }
};

export default api;

// Content from: C:\MyPrograms\AthleteDB\client\tailwind.config.js

// tailwind.config.js
/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    "./src/**/*.{js,jsx,ts,tsx}",
  ],
  theme: {
    container: {
      center: true,
      padding: "2rem",
      screens: {
        "2xl": "1400px",
      },
    },
    extend: {
      colors: {
        border: "hsl(var(--border))",
        input: "hsl(var(--input))",
        ring: "hsl(var(--ring))",
        background: "hsl(var(--background))",
        foreground: "hsl(var(--foreground))",
        primary: {
          DEFAULT: "hsl(var(--primary))",
          foreground: "hsl(var(--primary-foreground))",
        },
        secondary: {
          DEFAULT: "hsl(var(--secondary))",
          foreground: "hsl(var(--secondary-foreground))",
        },
        destructive: {
          DEFAULT: "hsl(var(--destructive))",
          foreground: "hsl(var(--destructive-foreground))",
        },
        muted: {
          DEFAULT: "hsl(var(--muted))",
          foreground: "hsl(var(--muted-foreground))",
        },
        accent: {
          DEFAULT: "hsl(var(--accent))",
          foreground: "hsl(var(--accent-foreground))",
        },
        popover: {
          DEFAULT: "hsl(var(--popover))",
          foreground: "hsl(var(--popover-foreground))",
        },
        card: {
          DEFAULT: "hsl(var(--card))",
          foreground: "hsl(var(--card-foreground))",
        },
      },
      borderRadius: {
        lg: "var(--radius)",
        md: "calc(var(--radius) - 2px)",
        sm: "calc(var(--radius) - 4px)",
      },
    },
  },
  plugins: [],
}

// Content from: C:\MyPrograms\AthleteDB\combineAllFiles.js

const fs = require('fs');
const path = require('path');

// Output file paths
const structureFile = path.join(__dirname, 'structure.txt');
const combinedFile = path.join(__dirname, 'combinedfiles.txt');

// Relevant file extensions to include for concatenation
const relevantExtensions = ['.js', '.json', '.jsx', '.css', '.html'];

// Directories and specific files to exclude
const excludedDirs = ['node_modules', '.git', '.vscode', 'build', 'dist', 'logs', 'coverage'];
const excludedFiles = ['package-lock.json']; // Exclude package-lock.json specifically
const excludePatterns = [
  'node_modules', 'package-lock.json', '*.md', '.gitignore', 'LICENSE', 
  'structure.txt', 'tests', 'deploy.sh', '.git', '.vscode'
]; // For directory structure
const maxSize = 1024 * 1024; // 1MB size limit for files

// Initialize the output file for directory structure
fs.writeFileSync(structureFile, '');

// Function to recursively list directories and files, excluding certain files and directories
function listDirectory(dirPath, indent = '') {
  fs.readdirSync(dirPath, { withFileTypes: true }).forEach((dirent) => {
    const fullPath = path.join(dirPath, dirent.name);

    // If it's a directory and not in the exclude list, process it
    if (dirent.isDirectory() && !excludedDirs.includes(dirent.name)) {
      fs.appendFileSync(structureFile, `${indent}|-- ${dirent.name}\n`);
      listDirectory(fullPath, indent + '    '); // Recurse into the directory with increased indentation
    } else if (!dirent.isDirectory()) {
      const ext = path.extname(dirent.name);
      if (!excludePatterns.includes(dirent.name) && !excludePatterns.includes(ext)) {
        fs.appendFileSync(structureFile, `${indent}|-- ${dirent.name}\n`);
      }
    }
  });
}

// Function to recursively find all relevant files in a directory for concatenation
function getAllFiles(dirPath, arrayOfFiles = []) {
  const files = fs.readdirSync(dirPath);

  files.forEach(function (file) {
    const filePath = path.join(dirPath, file);

    if (fs.statSync(filePath).isDirectory()) {
      if (!excludedDirs.includes(file)) {
        arrayOfFiles = getAllFiles(filePath, arrayOfFiles);
      }
    } else {
      // Only include relevant file extensions and exclude oversized or excluded files
      const ext = path.extname(file);
      const fileSize = fs.statSync(filePath).size;
      const fileName = path.basename(filePath);

      if (
        relevantExtensions.includes(ext) &&
        !excludedFiles.includes(fileName) &&
        fileSize <= maxSize
      ) {
        arrayOfFiles.push(filePath);
      }
    }
  });

  return arrayOfFiles;
}

// Function to concatenate files into a single file
function concatenateFiles(fileList, outputPath) {
  let combinedContent = '';

  fileList.forEach(filePath => {
    if (fs.existsSync(filePath)) {
      const fileContent = fs.readFileSync(filePath, 'utf8');
      combinedContent += `\n\n// Content from: ${filePath}\n\n` + fileContent;
    } else {
      console.error(`File not found: ${filePath}`);
    }
  });

  fs.writeFileSync(outputPath, combinedContent, 'utf8');
  console.log(`Files have been combined into ${outputPath}`);
}

// Start listing from the current directory and output directory structure to structure.txt
listDirectory('.');

// Get all relevant files from the backend and frontend directories
const allFiles = getAllFiles(__dirname);
//const frontendFiles = getAllFiles(path.join(__dirname, 'frontend'));

// Combine both arrays of files for concatenation
//const allFiles = backendFiles.concat(frontendFiles);

// Run the concatenation function with all relevant files
concatenateFiles(allFiles, combinedFile);

console.log(`Directory structure has been written to ${structureFile}`);


// Content from: C:\MyPrograms\AthleteDB\liststructure.js

const fs = require('fs');
const path = require('path');

// Set the output file name
const outputFile = 'structure.txt';

// Initialize the output file
fs.writeFileSync(outputFile, '');

// Patterns to exclude
const excludePatterns = [
  'node_modules',
  'package-lock.json',
  '.md',
  '.gitignore',
  'LICENSE',
  'structure.txt',
  'tests',
  'deploy.sh',
  '.git'
];

// Function to recursively list directories and files, excluding certain files and directories
function listDirectory(dirPath, indent = '') {
  // Read all directories and files in the current path
  fs.readdirSync(dirPath, { withFileTypes: true }).forEach((dirent) => {
    const fullPath = path.join(dirPath, dirent.name);

    // If it's a directory and not in the exclude list, process it
    if (
      dirent.isDirectory() &&
      !excludePatterns.includes(dirent.name)
    ) {
      // Write the directory name to the output file with indentation
      fs.appendFileSync(outputFile, `${indent}|-- ${dirent.name}\n`);

      // Recurse into the directory with increased indentation
      listDirectory(fullPath, indent + '    ');
    } else if (!dirent.isDirectory()) {
      const ext = path.extname(dirent.name);
      // If it's a file and doesn't match any exclude pattern, write it to the output file
      if (!excludePatterns.includes(dirent.name) && !excludePatterns.includes(ext)) {
        fs.appendFileSync(outputFile, `${indent}|-- ${dirent.name}\n`);
      }
    }
  });
}

// Start listing from the current directory
listDirectory('.');

console.log(`Directory structure has been written to ${outputFile}`);


// Content from: C:\MyPrograms\AthleteDB\server\config\db.js

// server/config/db.js
const mongoose = require('mongoose');

const connectDB = async () => {
    try {
        await mongoose.connect(process.env.MONGO_URI, {
            useNewUrlParser: true,
            useUnifiedTopology: true,
        });
        console.log("MongoDB connected");
    } catch (error) {
        console.error("MongoDB connection error:", error);
        process.exit(1);
    }
};

module.exports = connectDB;


// Content from: C:\MyPrograms\AthleteDB\server\controllers\assessmentController.js

// controllers/assessmentController.js
const { Assessment } = require('../models/Assessment');
const asyncHandler = require('express-async-handler');

exports.getAssessments = asyncHandler(async (req, res) => {
  const page = parseInt(req.query.page) || 1;
  const limit = parseInt(req.query.limit) || 10;
  const skipIndex = (page - 1) * limit;
  
  const query = {};
  if (req.query.athleteId) {
    query.athlete = req.query.athleteId;
  }
  
  if (req.query.startDate && req.query.endDate) {
    query.assessmentDate = {
      $gte: new Date(req.query.startDate),
      $lte: new Date(req.query.endDate)
    };
  }

  const total = await Assessment.countDocuments(query);
  const assessments = await Assessment.find(query)
    .populate('athlete', 'name')
    .sort({ assessmentDate: -1 })
    .limit(limit)
    .skip(skipIndex);

  res.status(200).json({
    success: true,
    count: assessments.length,
    total,
    totalPages: Math.ceil(total / limit),
    currentPage: page,
    data: assessments
  });
});

exports.getAssessment = asyncHandler(async (req, res) => {
  const assessment = await Assessment.findById(req.params.id)
    .populate('athlete');

  if (!assessment) {
    res.status(404);
    throw new Error('Assessment not found');
  }

  res.status(200).json({
    success: true,
    data: assessment
  });
});

exports.createAssessment = asyncHandler(async (req, res) => {
  const assessment = await Assessment.create(req.body);
  
  res.status(201).json({
    success: true,
    data: assessment
  });
});

exports.updateAssessment = asyncHandler(async (req, res) => {
  const assessment = await Assessment.findByIdAndUpdate(
    req.params.id,
    req.body,
    { new: true, runValidators: true }
  ).populate('athlete');

  if (!assessment) {
    res.status(404);
    throw new Error('Assessment not found');
  }

  res.status(200).json({
    success: true,
    data: assessment
  });
});

exports.deleteAssessment = asyncHandler(async (req, res) => {
  const assessment = await Assessment.findById(req.params.id);

  if (!assessment) {
    res.status(404);
    throw new Error('Assessment not found');
  }

  await assessment.deleteOne();

  res.status(200).json({
    success: true,
    data: {}
  });
});

// Content from: C:\MyPrograms\AthleteDB\server\controllers\athleteController.js

// server/controllers/athleteController.js
const { Athlete } = require('../models/Athlete');
const { Assessment } = require('../models/Assessment');
const asyncHandler = require('express-async-handler');

// @desc    Get all athletes
// @route   GET /api/athletes
exports.getAthletes = asyncHandler(async (req, res) => {
  const page = parseInt(req.query.page) || 1;
  const limit = parseInt(req.query.limit) || 10;
  const skipIndex = (page - 1) * limit;
  
  const query = {};
  if (req.query.search) {
    query.name = { $regex: req.query.search, $options: 'i' };
  }

  const total = await Athlete.countDocuments(query);
  const athletes = await Athlete.find(query)
    .sort({ name: 1 })
    .limit(limit)
    .skip(skipIndex);

  res.status(200).json({
    success: true,
    count: athletes.length,
    total,
    totalPages: Math.ceil(total / limit),
    currentPage: page,
    data: athletes
  });
});

// @desc    Get single athlete
// @route   GET /api/athletes/:id
exports.getAthlete = asyncHandler(async (req, res) => {
  const athlete = await Athlete.findById(req.params.id)
    .populate('assessments');

  if (!athlete) {
    res.status(404);
    throw new Error('Athlete not found');
  }

  res.status(200).json({
    success: true,
    data: athlete
  });
});

// @desc    Create athlete
// @route   POST /api/athletes
exports.createAthlete = asyncHandler(async (req, res) => {
  const athlete = await Athlete.create(req.body);
  
  res.status(201).json({
    success: true,
    data: athlete
  });
});

// @desc    Update athlete
// @route   PUT /api/athletes/:id
exports.updateAthlete = asyncHandler(async (req, res) => {
  const athlete = await Athlete.findByIdAndUpdate(
    req.params.id,
    req.body,
    { new: true, runValidators: true }
  );

  if (!athlete) {
    res.status(404);
    throw new Error('Athlete not found');
  }

  res.status(200).json({
    success: true,
    data: athlete
  });
});

// @desc    Delete athlete
// @route   DELETE /api/athletes/:id
exports.deleteAthlete = asyncHandler(async (req, res) => {
  const athlete = await Athlete.findById(req.params.id);

  if (!athlete) {
    res.status(404);
    throw new Error('Athlete not found');
  }

  // Delete associated assessments
  await Assessment.deleteMany({ athlete: req.params.id });

  await athlete.deleteOne();

  res.status(200).json({
    success: true,
    data: {}
  });
});

// @desc    Get athlete statistics
// @route   GET /api/athletes/:id/statistics
exports.getAthleteStats = asyncHandler(async (req, res) => {
  const athlete = await Athlete.findById(req.params.id);

  if (!athlete) {
    res.status(404);
    throw new Error('Athlete not found');
  }

  const assessments = await Assessment.find({ athlete: req.params.id })
    .sort({ assessmentDate: -1 });

  const stats = {
    totalAssessments: assessments.length,
    latestAssessment: assessments[0],
    performanceHistory: assessments.map(a => ({
      date: a.assessmentDate,
      verticalJump: a.performance?.verticalJump?.value,
      broadJump: a.performance?.broadJump?.value,
      tenYardSprint: a.performance?.tenYardSprint?.value,
      ohmbThrow: a.performance?.ohmbThrow?.value,
      mbShotput: a.performance?.mbShotput?.value,
      mbLeadArm: a.performance?.mbLeadArm?.value
    }))
  };

  res.status(200).json({
    success: true,
    data: stats
  });
});

// @desc    Get athlete performance trends
// @route   GET /api/athletes/:id/trends
exports.getAthleteTrends = asyncHandler(async (req, res) => {
  const { metric } = req.query;
  if (!metric) {
    res.status(400);
    throw new Error('Metric parameter is required');
  }

  const athlete = await Athlete.findById(req.params.id);
  if (!athlete) {
    res.status(404);
    throw new Error('Athlete not found');
  }

  const assessments = await Assessment.find({ 
    athlete: req.params.id,
    [`performance.${metric}.value`]: { $exists: true }
  })
  .sort('assessmentDate')
  .select(`assessmentDate performance.${metric}`);

  const trends = assessments.map(a => ({
    date: a.assessmentDate,
    value: a.performance[metric].value
  }));

  res.status(200).json({
    success: true,
    data: trends
  });
});

// Content from: C:\MyPrograms\AthleteDB\server\controllers\statisticsController.js

// server/controllers/statisticsController.js
const { Assessment } = require('../models/Assessment');
const { Athlete } = require('../models/Athlete');
const asyncHandler = require('express-async-handler');

// Get dashboard statistics
exports.getDashboardStats = asyncHandler(async (req, res) => {
  const [totalAthletes, totalAssessments, recentAssessments] = await Promise.all([
    Athlete.countDocuments(),
    Assessment.countDocuments(),
    Assessment.find()
      .sort({ assessmentDate: -1 })
      .limit(5)
      .populate('athlete', 'name')
  ]);

  // Get this month's assessments
  const startOfMonth = new Date();
  startOfMonth.setDate(1);
  startOfMonth.setHours(0, 0, 0, 0);
  
  const assessmentsThisMonth = await Assessment.countDocuments({
    assessmentDate: { $gte: startOfMonth }
  });

  res.status(200).json({
    success: true,
    data: {
      totalAthletes,
      totalAssessments,
      assessmentsThisMonth,
      recentAssessments,
      averageAssessmentsPerAthlete: totalAthletes > 0 
        ? (totalAssessments / totalAthletes).toFixed(1) 
        : 0
    }
  });
});

// Get performance trends across all athletes
exports.getPerformanceTrends = asyncHandler(async (req, res) => {
  const { metric = 'verticalJump', timeframe = '1y' } = req.query;
  
  // Calculate date range based on timeframe
  const endDate = new Date();
  const startDate = new Date();
  
  switch(timeframe) {
    case '1m':
      startDate.setMonth(startDate.getMonth() - 1);
      break;
    case '3m':
      startDate.setMonth(startDate.getMonth() - 3);
      break;
    case '6m':
      startDate.setMonth(startDate.getMonth() - 6);
      break;
    case '1y':
    default:
      startDate.setFullYear(startDate.getFullYear() - 1);
  }

  // Fetch assessments within date range
  const assessments = await Assessment.find({
    assessmentDate: { $gte: startDate, $lte: endDate },
    [`performance.${metric}.value`]: { $exists: true }
  })
  .select(`assessmentDate performance.${metric}.value`)
  .sort('assessmentDate');

  // Group data by month for trending
  const trendData = assessments.reduce((acc, assessment) => {
    const month = new Date(assessment.assessmentDate).toLocaleString('default', { month: 'short' });
    const value = assessment.performance[metric].value;
    
    if (!acc[month]) {
      acc[month] = { values: [], average: 0 };
    }
    
    acc[month].values.push(value);
    acc[month].average = acc[month].values.reduce((a, b) => a + b) / acc[month].values.length;
    
    return acc;
  }, {});

  res.status(200).json({
    success: true,
    data: Object.entries(trendData).map(([month, data]) => ({
      month,
      average: Number(data.average.toFixed(2)),
      count: data.values.length
    }))
  });
});

// Get comparative statistics for athletes
exports.getComparativeStats = asyncHandler(async (req, res) => {
  const { athletes, metrics } = req.query;
  
  if (!athletes || !metrics) {
    res.status(400);
    throw new Error('Athletes and metrics parameters are required');
  }

  const athleteIds = athletes.split(',');
  const metricsList = metrics.split(',');

  // Get latest assessment for each athlete
  const latestAssessments = await Promise.all(
    athleteIds.map(async (athleteId) => {
      const assessment = await Assessment.findOne({ athlete: athleteId })
        .sort({ assessmentDate: -1 })
        .populate('athlete', 'name')
        .select(`athlete performance ${metricsList.join(' ')}`);
      return assessment;
    })
  );

  // Format comparative data
  const comparativeData = latestAssessments.map(assessment => {
    const data = {
      athleteId: assessment.athlete._id,
      athleteName: assessment.athlete.name
    };

    metricsList.forEach(metric => {
      if (assessment.performance && assessment.performance[metric]) {
        data[metric] = assessment.performance[metric].value;
      }
    });

    return data;
  });

  res.status(200).json({
    success: true,
    data: comparativeData
  });
});

// Content from: C:\MyPrograms\AthleteDB\server\models\Assessment.js

// models/Assessment.js
const mongoose = require('mongoose');

const assessmentSchema = new mongoose.Schema({
    athlete: {
      type: mongoose.Schema.Types.ObjectId,
      ref: 'Athlete',
      required: true
    },
    assessmentDate: {
      type: Date,
      required: [true, 'Assessment date is required'],
      default: Date.now
    },
    movementScreen: {
      overheadSquat: {
        scoreLeft: { type: Number, min: 1, max: 3 },
        scoreRight: { type: Number, min: 1, max: 3 },
        comments: String
      },
      hurdleStep: {
        scoreLeft: { type: Number, min: 1, max: 3 },
        scoreRight: { type: Number, min: 1, max: 3 },
        comments: String
      },
      inlineLunge: {
        scoreLeft: { type: Number, min: 1, max: 3 },
        scoreRight: { type: Number, min: 1, max: 3 },
        comments: String
      },
      apleyScratch: {
        scoreLeft: { type: String, enum: ['pass', 'fail', ''] },
        scoreRight: { type: String, enum: ['pass', 'fail', ''] },
        comments: String
      }
    },
    performance: {
      verticalJump: {
        value: Number,
        attempts: [Number],
        unit: { type: String, default: 'in' }
      },
      broadJump: {
        value: Number,
        attempts: [Number],
        unit: { type: String, default: 'in' }
      },
      tenYardSprint: {
        value: Number,
        attempts: [Number]
      },
      ohmbThrow: {
        value: Number,
        attempts: [Number],
        unit: { type: String, default: 'in' }
      },
      mbShotput: {
        value: Number,
        attempts: [Number],
        unit: { type: String, default: 'in' }
      },
      mbLeadArm: {
        value: Number,
        attempts: [Number],
        unit: { type: String, default: 'in' }
      }
    },
    generalComments: {
      type: String,
      trim: true
    }
  }, {
    timestamps: true
  });
  
const Assessment = mongoose.model('Assessment', assessmentSchema);
  
module.exports = { Assessment };

// Content from: C:\MyPrograms\AthleteDB\server\models\Athlete.js

// models/Athlete.js
const mongoose = require('mongoose');

const athleteSchema = new mongoose.Schema({
  name: {
    type: String,
    required: [true, 'Name is required'],
    trim: true
  },
  dateOfBirth: {
    type: Date,
    required: false
  },
  height: {
    value: {
      type: Number,
      required: false
    },
    unit: {
      type: String,
      enum: ['in', 'cm'],
      default: 'in'
    }
  },
  weight: {
    value: {
      type: Number,
      required: false
    },
    unit: {
      type: String,
      enum: ['lbs', 'kg'],
      default: 'lbs'
    }
  }
}, {
  timestamps: true,
  toJSON: { virtuals: true },
  toObject: { virtuals: true }
});

// Virtual for age calculation
athleteSchema.virtual('age').get(function() {
  if (!this.dateOfBirth) return null;
  const today = new Date();
  const birthDate = new Date(this.dateOfBirth);
  let age = today.getFullYear() - birthDate.getFullYear();
  const m = today.getMonth() - birthDate.getMonth();
  if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {
    age--;
  }
  return age;
});

// Virtual to populate assessments
athleteSchema.virtual('assessments', {
  ref: 'Assessment',
  localField: '_id',
  foreignField: 'athlete'
});

const Athlete = mongoose.model('Athlete', athleteSchema);

module.exports = { Athlete };

// Content from: C:\MyPrograms\AthleteDB\server\package.json

{
  "name": "server",
  "version": "1.0.0",
  "main": "index.js",
  "scripts": {
    "start": "node server.js",
    "dev": "nodemon server.js",
    "test": "jest"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "dependencies": {
    "bcryptjs": "^2.4.3",
    "cors": "^2.8.5",
    "dotenv": "^16.4.5",
    "express": "^4.21.1",
    "express-async-handler": "^1.2.0",
    "jsonwebtoken": "^9.0.2",
    "mongoose": "^8.8.1",
    "morgan": "^1.10.0"
  },
  "description": ""
}


// Content from: C:\MyPrograms\AthleteDB\server\routes\assessmentRoutes.js

// server/routes/assessmentRoutes.js
const express = require('express');
const router = express.Router();
const {
  getAssessments,
  getAssessment,
  createAssessment,
  updateAssessment,
  deleteAssessment
} = require('../controllers/assessmentController');

// Assessment CRUD routes
router.route('/')
  .get(getAssessments)
  .post(createAssessment);

router.route('/:id')
  .get(getAssessment)
  .put(updateAssessment)
  .delete(deleteAssessment);

module.exports = router;

// Content from: C:\MyPrograms\AthleteDB\server\routes\athleteRoutes.js


// server/routes/athleteRoutes.js
const express = require('express');
const router = express.Router();
const {
  getAthletes,
  getAthlete,
  createAthlete,
  updateAthlete,
  deleteAthlete,
  getAthleteStats,
  getAthleteTrends
} = require('../controllers/athleteController');

// Base athlete CRUD routes
router.route('/')
  .get(getAthletes)
  .post(createAthlete);

router.route('/:id')
  .get(getAthlete)
  .put(updateAthlete)
  .delete(deleteAthlete);

// Analytics routes
router.get('/:id/statistics', getAthleteStats);
router.get('/:id/trends', getAthleteTrends);

module.exports = router;

// Content from: C:\MyPrograms\AthleteDB\server\routes\index.js

// server/routes/index.js
const express = require('express');
const router = express.Router();

const athleteRoutes = require('./athleteRoutes');
const assessmentRoutes = require('./assessmentRoutes');

// Mount routes
router.use('/athletes', athleteRoutes);
router.use('/assessments', assessmentRoutes);

module.exports = router;

// Content from: C:\MyPrograms\AthleteDB\server\server.js

// server/server.js
require('dotenv').config();
const express = require('express');
const mongoose = require('mongoose');
const cors = require('cors');
const morgan = require('morgan');
const routes = require('./routes');

const app = express();

// Middleware
app.use(cors());
app.use(morgan('dev'));
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// Routes
app.use('/api', routes);

// Error handling middleware
app.use((err, req, res, next) => {
  console.error(err.stack);
  res.status(err.status || 500).json({
    success: false,
    error: err.message || 'Server Error'
  });
});

// Database connection
mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/athleteDB')
  .then(() => console.log('MongoDB Connected'))
  .catch(err => console.log('MongoDB connection error:', err));

const PORT = process.env.PORT || 5000;

app.listen(PORT, () => {
  console.log(`Server is running on port ${PORT}`);
});